---
import Layout from '../../layouts/ProtectedLayout.astro';
import { getUser } from '../../utils/auth';

const user = await getUser(Astro);
const { id } = Astro.params;
---

<Layout title="Terminplanung Details">
  <div class="container mx-auto px-4 py-8">
    <div class="mb-6">
      <a href="/terminplanung" class="text-blue-600 hover:text-blue-800 flex items-center gap-2">
        ← Zurück zur Übersicht
      </a>
    </div>

    <div id="terminplanung-details" class="max-w-4xl mx-auto">
      <!-- Terminplanung wird hier dynamisch geladen -->
    </div>
  </div>

  <!-- Abstimmungs-Modal -->
  <div id="abstimmungModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg max-w-md w-full p-6">
        <h3 class="text-lg font-semibold mb-4">Abstimmung</h3>
        <form id="abstimmungForm">
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-3">Deine Stimme:</label>
            <div class="space-y-2">
              <label class="flex items-center">
                <input type="radio" name="stimme" value="APPROVE" class="mr-3">
                <span class="text-green-700">✅ Zustimmen</span>
              </label>
              <label class="flex items-center">
                <input type="radio" name="stimme" value="NEED_INFO" class="mr-3">
                <span class="text-yellow-700">❓ Brauche mehr Infos / Diskussion</span>
              </label>
            </div>
          </div>
          
          <div class="mb-6">
            <label class="block text-sm font-medium text-gray-700 mb-2">Kommentar (optional)</label>
            <textarea 
              id="kommentar" 
              name="kommentar" 
              rows="3"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Deine Gedanken zu diesem Termin..."
            ></textarea>
          </div>
          
          <div class="flex justify-end gap-3">
            <button 
              type="button" 
              id="abstimmungCancelBtn"
              class="px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50"
            >
              Abbrechen
            </button>
            <button 
              type="submit" 
              class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              Stimme abgeben
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Kommentar-Modal -->
  <div id="kommentarModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg max-w-md w-full p-6">
        <h3 class="text-lg font-semibold mb-4">Kommentar hinzufügen</h3>
        <form id="kommentarForm">
          <div class="mb-6">
            <label class="block text-sm font-medium text-gray-700 mb-2">Dein Kommentar:</label>
            <textarea 
              id="kommentarInhalt" 
              name="kommentarInhalt" 
              rows="4"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Was möchtest du zu diesem Termin sagen?"
            ></textarea>
          </div>
          
          <div class="flex justify-end gap-3">
            <button 
              type="button" 
              id="kommentarCancelBtn"
              class="px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50"
            >
              Abbrechen
            </button>
            <button 
              type="submit" 
              class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              Kommentar hinzufügen
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</Layout>

<script>
  const terminplanungId = parseInt(window.location.pathname.split('/').pop());
  let terminplanung = null;
  let currentUser = null;

  // User-Info laden
  async function loadCurrentUser() {
    try {
      const response = await fetch('/api/auth/me');
      if (response.ok) {
        currentUser = await response.json();
      }
    } catch (error) {
      console.error('Fehler beim Laden der User-Info:', error);
    }
  }

  // Terminplanung laden
  async function loadTerminplanung() {
    try {
      const response = await fetch(`/api/terminplanung/${terminplanungId}`);
      if (response.ok) {
        terminplanung = await response.json();
        renderTerminplanung();
      } else {
        const error = await response.json();
        document.getElementById('terminplanung-details').innerHTML = `
          <div class="text-center py-8">
            <p class="text-red-600">Fehler: ${error.error}</p>
          </div>
        `;
      }
    } catch (error) {
      console.error('Fehler beim Laden der Terminplanung:', error);
      document.getElementById('terminplanung-details').innerHTML = `
        <div class="text-center py-8">
          <p class="text-red-600">Fehler beim Laden der Terminplanung</p>
        </div>
      `;
    }
  }

  // Terminplanung rendern
  function renderTerminplanung() {
    if (!terminplanung) return;

    const statusColor = 
      terminplanung.status === 'APPROVED' ? 'bg-green-100 text-green-800' :
      terminplanung.status === 'DISCUSSING' ? 'bg-yellow-100 text-yellow-800' :
      terminplanung.status === 'PENDING' ? 'bg-orange-100 text-orange-800' :
      'bg-gray-100 text-gray-800';

    const statusText = 
      terminplanung.status === 'APPROVED' ? 'Freigegeben' :
      terminplanung.status === 'DISCUSSING' ? 'In Diskussion' :
      terminplanung.status === 'PENDING' ? 'Warten auf Abstimmungen' :
      'Storniert';

    // Prüfen ob User bereits abgestimmt hat
    const userAbstimmung = terminplanung.abstimmungen.find(a => 
      a.userId === currentUser?.id && a.version === terminplanung.version
    );

    const canEdit = (terminplanung.userId === currentUser?.id || currentUser?.role === 'ADMIN') && terminplanung.status !== 'APPROVED';
    const canVote = terminplanung.userId !== currentUser?.id && terminplanung.status !== 'CANCELLED';

    document.getElementById('terminplanung-details').innerHTML = `
      <div class="bg-white rounded-lg shadow-lg p-6">
        <!-- Header -->
        <div class="flex justify-between items-start mb-6">
          <div>
            <h1 class="text-2xl font-bold text-gray-900 mb-2">${terminplanung.titel}</h1>
            <div class="flex items-center gap-4 text-sm text-gray-600">
              <span>von ${terminplanung.user.name}</span>
              <span>•</span>
              <span>Version ${terminplanung.version}</span>
            </div>
          </div>
          <span class="px-3 py-1 rounded-full text-sm font-medium ${statusColor}">
            ${statusText}
          </span>
        </div>

        <!-- Termin-Details -->
        <div class="mb-6 p-4 bg-gray-50 rounded-lg">
          <h3 class="font-semibold text-gray-900 mb-2">Termin</h3>
          <div class="text-lg">
            ${new Date(terminplanung.startDatum).toLocaleDateString('de-DE', { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })} - 
            ${new Date(terminplanung.endDatum).toLocaleDateString('de-DE', { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}
          </div>
          ${terminplanung.beschreibung ? `
            <div class="mt-2 text-gray-700">
              <strong>Beschreibung:</strong><br>
              ${terminplanung.beschreibung}
            </div>
          ` : ''}
        </div>

        <!-- Aktionen -->
        <div class="flex gap-3 mb-6">
          ${canEdit ? `
            <button 
              onclick="editTerminplanung()"
              class="px-4 py-2 bg-blue-100 text-blue-700 rounded hover:bg-blue-200"
            >
              Bearbeiten
            </button>
            <button 
              onclick="cancelTerminplanung()"
              class="px-4 py-2 bg-red-100 text-red-700 rounded hover:bg-red-200"
            >
              Stornieren
            </button>
          ` : ''}
          ${canVote ? `
            ${terminplanung.abstimmungen.some(a => a.userId === currentUser?.id && a.stimme === 'APPROVE' && a.version === terminplanung.version) ? `
              <button 
                onclick="zustimmungEntziehen(${terminplanung.id})"
                class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 font-medium"
              >
                ❌ Zustimmung entziehen
              </button>
            ` : `
              <button 
                onclick="zustimmen(${terminplanung.id})"
                class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 font-medium"
              >
                ✅ Zustimmen
              </button>
            `}
          ` : ''}
          <button 
            onclick="openKommentarModal()"
            class="px-4 py-2 bg-yellow-100 text-yellow-700 rounded hover:bg-yellow-200"
          >
            Kommentieren
          </button>
        </div>

        <!-- Abstimmungen -->
        <div class="mb-6">
          <h3 class="font-semibold text-gray-900 mb-3">Abstimmungen (Version ${terminplanung.version})</h3>
          <div class="space-y-2">
            ${terminplanung.abstimmungen
              .filter(a => a.version === terminplanung.version)
              .map(abstimmung => `
                <div class="flex items-center justify-between p-3 bg-gray-50 rounded">
                  <div class="flex items-center gap-3">
                    <span class="font-medium">${abstimmung.user.name}</span>
                    <span class="px-2 py-1 rounded text-xs ${
                      abstimmung.stimme === 'APPROVE' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                    }">
                      ${abstimmung.stimme === 'APPROVE' ? '✅ Zustimmen' : '❓ Mehr Infos'}
                    </span>
                  </div>
                  <span class="text-sm text-gray-500">
                    ${new Date(abstimmung.createdAt).toLocaleDateString('de-DE')}
                  </span>
                </div>
                ${abstimmung.kommentar ? `
                  <div class="ml-6 p-2 bg-white rounded text-sm text-gray-700">
                    "${abstimmung.kommentar}"
                  </div>
                ` : ''}
              `).join('')}
            ${terminplanung.abstimmungen.filter(a => a.version === terminplanung.version).length === 0 ? 
              '<p class="text-gray-500 text-sm">Noch keine Abstimmungen</p>' : ''}
          </div>
          
          <!-- Status-Info -->
          ${terminplanung.status === 'PENDING' ? `
            <div class="mt-4 p-3 bg-orange-50 border border-orange-200 rounded">
              <div class="flex items-center gap-2">
                <span class="text-orange-600">⏳</span>
                <span class="text-sm text-orange-800">
                  Warten auf Abstimmungen der anderen Mitglieder
                </span>
              </div>
            </div>
          ` : terminplanung.status === 'DISCUSSING' ? `
            <div class="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded">
              <div class="flex items-center gap-2">
                <span class="text-yellow-600">💬</span>
                <span class="text-sm text-yellow-800">
                  In Diskussion - es gibt Kommentare oder "Mehr Infos" Stimmen
                </span>
              </div>
            </div>
          ` : terminplanung.status === 'APPROVED' ? `
            <div class="mt-4 p-3 bg-green-50 border border-green-200 rounded">
              <div class="flex items-center gap-2">
                <span class="text-green-600">✅</span>
                <span class="text-sm text-green-800">
                  Termin ist freigegeben - alle haben zugestimmt!
                </span>
              </div>
            </div>
          ` : ''}
        </div>

        <!-- Kommentare -->
        <div class="mb-6">
          <h3 class="font-semibold text-gray-900 mb-3">Kommentare</h3>
          <div class="space-y-3">
            ${terminplanung.kommentare.map(kommentar => `
              <div class="p-3 bg-gray-50 rounded">
                <div class="flex items-center justify-between mb-1">
                  <span class="font-medium text-sm">${kommentar.user.name}</span>
                  <span class="text-xs text-gray-500">
                    ${new Date(kommentar.createdAt).toLocaleDateString('de-DE')} 
                    ${new Date(kommentar.createdAt).toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' })}
                  </span>
                </div>
                <p class="text-gray-700">${kommentar.inhalt}</p>
              </div>
            `).join('')}
            ${terminplanung.kommentare.length === 0 ? 
              '<p class="text-gray-500 text-sm">Noch keine Kommentare</p>' : ''}
          </div>
        </div>

        <!-- Änderungshistorie -->
        ${terminplanung.aenderungen.length > 0 ? `
          <div>
            <h3 class="font-semibold text-gray-900 mb-3">Änderungshistorie</h3>
            <div class="space-y-2">
              ${terminplanung.aenderungen.map(aenderung => `
                <div class="p-3 bg-blue-50 rounded text-sm">
                  <div class="font-medium">${aenderung.user.name} hat die Termine geändert</div>
                  <div class="text-gray-600 mt-1">
                    <strong>Von:</strong> ${new Date(aenderung.alteStartDatum).toLocaleDateString('de-DE')} - 
                    ${new Date(aenderung.alteEndDatum).toLocaleDateString('de-DE')}<br>
                    <strong>Zu:</strong> ${new Date(aenderung.neueStartDatum).toLocaleDateString('de-DE')} - 
                    ${new Date(aenderung.neueEndDatum).toLocaleDateString('de-DE')}
                  </div>
                  ${aenderung.grund ? `<div class="mt-1 text-gray-700">"${aenderung.grund}"</div>` : ''}
                  <div class="text-xs text-gray-500 mt-1">
                    ${new Date(aenderung.createdAt).toLocaleDateString('de-DE')}
                  </div>
                </div>
              `).join('')}
            </div>
          </div>
        ` : ''}
      </div>
    `;
  }

  // Modal-Funktionen
  function openAbstimmungModal() {
    const modal = document.getElementById('abstimmungModal');
    const form = document.getElementById('abstimmungForm');
    
    // Bestehende Abstimmung vorausfüllen
    const userAbstimmung = terminplanung.abstimmungen.find(a => 
      a.userId === currentUser?.id && a.version === terminplanung.version
    );
    
    if (userAbstimmung) {
      form.querySelector(`input[value="${userAbstimmung.stimme}"]`).checked = true;
      document.getElementById('kommentar').value = userAbstimmung.kommentar || '';
    } else {
      form.reset();
    }
    
    modal.classList.remove('hidden');
  }

  function closeAbstimmungModal() {
    document.getElementById('abstimmungModal').classList.add('hidden');
  }

  function openKommentarModal() {
    document.getElementById('kommentarModal').classList.remove('hidden');
  }

  function closeKommentarModal() {
    document.getElementById('kommentarModal').classList.add('hidden');
    document.getElementById('kommentarForm').reset();
  }

  // Event Listeners
  document.getElementById('abstimmungCancelBtn').addEventListener('click', closeAbstimmungModal);
  document.getElementById('kommentarCancelBtn').addEventListener('click', closeKommentarModal);

  document.getElementById('abstimmungForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const data = {
      stimme: formData.get('stimme'),
      kommentar: formData.get('kommentar')
    };
    
    try {
      const response = await fetch(`/api/terminplanung/${terminplanungId}/abstimmung`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });
      
      if (response.ok) {
        closeAbstimmungModal();
        loadTerminplanung();
      } else {
        const error = await response.json();
        alert('Fehler: ' + error.error);
      }
    } catch (error) {
      console.error('Fehler beim Abgeben der Abstimmung:', error);
      alert('Fehler beim Abgeben der Abstimmung');
    }
  });

  document.getElementById('kommentarForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const data = {
      inhalt: formData.get('kommentarInhalt')
    };
    
    try {
      const response = await fetch(`/api/terminplanung/${terminplanungId}/kommentar`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });
      
      if (response.ok) {
        closeKommentarModal();
        loadTerminplanung();
      } else {
        const error = await response.json();
        alert('Fehler: ' + error.error);
      }
    } catch (error) {
      console.error('Fehler beim Erstellen des Kommentars:', error);
      alert('Fehler beim Erstellen des Kommentars');
    }
  });

  // Funktionen
  window.zustimmen = async function(terminplanungId) {
    try {
      const response = await fetch(`/api/terminplanung/${terminplanungId}/abstimmung`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          stimme: 'APPROVE',
          kommentar: ''
        })
      });
      
      if (response.ok) {
        alert('Zustimmung erfolgreich abgegeben!');
        loadTerminplanung();
      } else {
        const error = await response.json();
        alert('Fehler: ' + error.error);
      }
    } catch (error) {
      console.error('Fehler beim Zustimmen:', error);
      alert('Fehler beim Zustimmen');
    }
  };

  window.zustimmungEntziehen = async function(terminplanungId) {
    try {
      const response = await fetch(`/api/terminplanung/${terminplanungId}/abstimmung`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        alert('Zustimmung erfolgreich entzogen!');
        loadTerminplanung();
      } else {
        const error = await response.json();
        alert('Fehler: ' + error.error);
      }
    } catch (error) {
      console.error('Fehler beim Entziehen der Zustimmung:', error);
      alert('Fehler beim Entziehen der Zustimmung');
    }
  };

  function editTerminplanung() {
    // TODO: Bearbeitungs-UI implementieren
    alert('Bearbeitung wird implementiert...');
  }

  function cancelTerminplanung() {
    if (confirm('Möchtest du diese Terminplanung wirklich stornieren?')) {
      // TODO: Stornierung implementieren
      alert('Stornierung wird implementiert...');
    }
  }

  // Initialisierung
  loadCurrentUser().then(() => {
    loadTerminplanung();
  });
</script>
