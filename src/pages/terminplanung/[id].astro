---
import Layout from '../../layouts/ProtectedLayout.astro';
import { getUser } from '../../utils/auth';

const user = await getUser(Astro);
const { id } = Astro.params;
---

<Layout title="Terminplanung Details">
  <div class="container mx-auto px-4 py-8">
    <div class="mb-6">
      <a href="/terminplanung" class="text-blue-600 hover:text-blue-800 flex items-center gap-2">
        ← Zurück zur Übersicht
      </a>
    </div>
    
    <div id="terminplanung-details" class="max-w-4xl mx-auto">
      <!-- Terminplanung wird hier dynamisch geladen -->
    </div>
  </div>

  <!-- Abstimmungs-Modal -->
  <div id="abstimmungModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg max-w-md w-full p-6">
        <h3 class="text-lg font-semibold mb-4">Abstimmung</h3>
        <form id="abstimmungForm">
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-3">Deine Stimme:</label>
            <div class="space-y-2">
              <label class="flex items-center">
                <input type="radio" name="stimme" value="APPROVE" class="mr-3">
                <span class="text-green-700">✅ Zustimmen</span>
              </label>
              <label class="flex items-center">
                <input type="radio" name="stimme" value="NEED_INFO" class="mr-3">
                <span class="text-yellow-700">❓ Brauche mehr Infos / Diskussion</span>
              </label>
            </div>
          </div>
          <div class="mb-6">
            <label class="block text-sm font-medium text-gray-700 mb-2">Kommentar (optional)</label>
            <textarea id="kommentar" name="kommentar" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Deine Gedanken zu diesem Termin..."></textarea>
          </div>
          <div class="flex justify-end gap-3">
            <button type="button" id="abstimmungCancelBtn" class="px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50">
              Abbrechen
            </button>
            <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
              Stimme abgeben
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Bearbeitungs-Modal -->
  <div id="editModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg max-w-md w-full p-6">
        <h3 class="text-lg font-semibold mb-4">Terminplanung bearbeiten</h3>
        <form id="editForm">
          <input type="hidden" id="editTerminplanungId" name="terminplanungId">
          <div class="mb-4">
            <label for="editTitel" class="block text-sm font-medium text-gray-700 mb-2">Titel</label>
            <input type="text" id="editTitel" name="titel" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required />
          </div>
          <div class="mb-4">
            <label for="editStartDatum" class="block text-sm font-medium text-gray-700 mb-2">Startdatum</label>
            <input type="date" id="editStartDatum" name="startDatum" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required />
          </div>
          <div class="mb-4">
            <label for="editEndDatum" class="block text-sm font-medium text-gray-700 mb-2">Enddatum</label>
            <input type="date" id="editEndDatum" name="endDatum" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required />
          </div>
          <div class="mb-6">
            <label for="editBeschreibung" class="block text-sm font-medium text-gray-700 mb-2">Beschreibung</label>
            <textarea id="editBeschreibung" name="beschreibung" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
          </div>
          <div class="flex justify-end gap-3">
            <button type="button" id="editCancelBtn" class="px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50">
              Abbrechen
            </button>
            <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
              Speichern
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Kommentar-Modal -->
  <div id="kommentarModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg max-w-md w-full p-6">
        <h3 class="text-lg font-semibold mb-4">Kommentar hinzufügen</h3>
        <form id="kommentarForm">
          <input type="hidden" id="kommentarTerminplanungId" name="terminplanungId">
          <input type="hidden" id="kommentarParentId" name="parentId">
          <div class="mb-6">
            <label class="block text-sm font-medium text-gray-700 mb-2">Dein Kommentar:</label>
            <textarea id="kommentarInhalt" name="kommentarInhalt" rows="4" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Was möchtest du zu diesem Termin sagen?"></textarea>
          </div>
          <div class="flex justify-end gap-3">
            <button type="button" id="kommentarCancelBtn" class="px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50">
              Abbrechen
            </button>
            <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
              Kommentar hinzufügen
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Toast Notification -->
  <div id="toast" class="fixed top-4 right-4 z-50 hidden">
    <div id="toast-content" class="bg-white border-l-4 p-4 rounded-lg shadow-lg max-w-sm">
      <div class="flex items-center">
        <div id="toast-icon" class="flex-shrink-0 mr-3"></div>
        <div>
          <p id="toast-title" class="text-sm font-medium text-gray-900"></p>
          <p id="toast-message" class="text-sm text-gray-500"></p>
        </div>
        <button id="toast-close" class="ml-4 text-gray-400 hover:text-gray-600">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  const terminplanungId = parseInt(window.location.pathname.split('/').pop());
  let terminplanung = null;
  let currentUser = null;

  // Toast Notification System
  function showToast(type, title, message) {
    const toast = document.getElementById('toast');
    const toastContent = document.getElementById('toast-content');
    const toastIcon = document.getElementById('toast-icon');
    const toastTitle = document.getElementById('toast-title');
    const toastMessage = document.getElementById('toast-message');
    
    // Toast-Typ konfigurieren
    const configs = {
      success: {
        icon: '✅',
        borderColor: 'border-green-500',
        bgColor: 'bg-green-50'
      },
      error: {
        icon: '❌',
        borderColor: 'border-red-500',
        bgColor: 'bg-red-50'
      },
      info: {
        icon: 'ℹ️',
        borderColor: 'border-blue-500',
        bgColor: 'bg-blue-50'
      },
      warning: {
        icon: '⚠️',
        borderColor: 'border-yellow-500',
        bgColor: 'bg-yellow-50'
      }
    };
    
    const config = configs[type] || configs.info;
    
    // Toast-Content aktualisieren
    toastIcon.textContent = config.icon;
    toastTitle.textContent = title;
    toastMessage.textContent = message;
    
    // Styling anwenden
    toastContent.className = `border-l-4 p-4 rounded-lg shadow-lg max-w-sm ${config.borderColor} ${config.bgColor}`;
    
    // Toast anzeigen
    toast.classList.remove('hidden');
    
    // Auto-hide nach 1 Sekunde
    setTimeout(() => {
      hideToast();
    }, 1000);
  }
  
  function hideToast() {
    const toast = document.getElementById('toast');
    toast.classList.add('hidden');
  }

  // User-Info laden
  async function loadCurrentUser() {
    try {
      const response = await fetch('/api/auth/me');
      if (response.ok) {
        currentUser = await response.json();
        console.log('🔍 DEBUG: Current user loaded:', currentUser);
      }
    } catch (error) {
      console.error('Fehler beim Laden der User-Info:', error);
    }
  }

  // Terminplanung laden
  async function loadTerminplanung() {
    console.log('🔍 DEBUG: loadTerminplanung() gestartet');
    console.log('🔍 DEBUG: terminplanungId =', terminplanungId);
    
    try {
      console.log('🔍 DEBUG: Fetching API...');
      const response = await fetch(`/api/terminplanung/${terminplanungId}`);
      console.log('🔍 DEBUG: Response status =', response.status);
      
      if (response.ok) {
        console.log('🔍 DEBUG: Response OK, parsing JSON...');
        terminplanung = await response.json();
        console.log('🔍 DEBUG: Terminplanung geladen:', terminplanung);
        console.log('🔍 DEBUG: Calling renderTerminplanung()...');
        renderTerminplanung();
        console.log('🔍 DEBUG: renderTerminplanung() completed');
      } else {
        console.log('🔍 DEBUG: Response not OK, parsing error...');
        const error = await response.json();
        console.log('🔍 DEBUG: Error:', error);
        const detailsEl = document.getElementById('terminplanung-details');
        if (detailsEl) {
          detailsEl.innerHTML = `
            <div class="text-center py-8">
              <p class="text-red-600">Fehler: ${error.error}</p>
            </div>
          `;
        }
      }
    } catch (error) {
      console.error('🔍 DEBUG: Catch block - Fehler beim Laden der Terminplanung:', error);
      const detailsEl = document.getElementById('terminplanung-details');
      if (detailsEl) {
        detailsEl.innerHTML = `
          <div class="text-center py-8">
            <p class="text-red-600">Fehler beim Laden der Terminplanung</p>
          </div>
        `;
      }
    }
  }

  // Terminplanung rendern
  function renderTerminplanung() {
    console.log('🔍 DEBUG: renderTerminplanung() gestartet');
    console.log('🔍 DEBUG: terminplanung =', terminplanung);
    
    if (!terminplanung) {
      console.log('🔍 DEBUG: Keine Terminplanung vorhanden, return');
      return;
    }
    
    console.log('🔍 DEBUG: Terminplanung vorhanden, starte Rendering...');

    const statusColor = 
      terminplanung.status === 'APPROVED' ? 'bg-green-100 text-green-800' :
      terminplanung.status === 'DISCUSSING' ? 'bg-yellow-100 text-yellow-800' :
      terminplanung.status === 'PENDING' ? 'bg-orange-100 text-orange-800' :
      'bg-gray-100 text-gray-800';

    const statusText = 
      terminplanung.status === 'APPROVED' ? 'Freigegeben' :
      terminplanung.status === 'DISCUSSING' ? 'In Diskussion' :
      terminplanung.status === 'PENDING' ? 'Warten auf Abstimmungen' :
      'Storniert';

    // Prüfen ob User bereits abgestimmt hat
    const userAbstimmung = terminplanung.abstimmungen.find(a => 
      a.userId === currentUser?.id && a.version === terminplanung.version
    );

    const canEdit = (terminplanung.userId === currentUser?.id || currentUser?.role === 'ADMIN') && terminplanung.status !== 'APPROVED';
    const canVote = terminplanung.userId !== currentUser?.id && terminplanung.status !== 'CANCELLED';

    const detailsEl = document.getElementById('terminplanung-details');
    if (!detailsEl) {
      console.error('🔍 DEBUG: terminplanung-details element not found');
      return;
    }

    detailsEl.innerHTML = `
      <div class="bg-white rounded-lg shadow-lg p-6">
        <!-- Header -->
        <div class="flex justify-between items-start mb-6">
          <div>
            <h1 class="text-2xl font-bold text-gray-900 mb-2">${terminplanung.titel}</h1>
            <div class="flex items-center gap-4 text-sm text-gray-600">
              <span>von ${terminplanung.user.name}</span>
              <span>•</span>
              <span>Version ${terminplanung.version}</span>
            </div>
          </div>
          <span class="px-3 py-1 rounded-full text-sm font-medium ${statusColor}">
            ${statusText}
          </span>
        </div>

        <!-- Termin-Details -->
        <div class="mb-6 p-4 bg-gray-50 rounded-lg">
          <h3 class="font-semibold text-gray-900 mb-2">Termin</h3>
          <div class="text-lg">
            ${new Date(terminplanung.startDatum).toLocaleDateString('de-DE', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })} - 
            ${new Date(terminplanung.endDatum).toLocaleDateString('de-DE', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}
          </div>
          ${terminplanung.beschreibung ? `
            <div class="mt-2 text-gray-700">
              <strong>Beschreibung:</strong><br>
              ${terminplanung.beschreibung}
            </div>
          ` : ''}
        </div>

        <!-- Aktionen -->
        <div class="flex gap-3 mb-6">
          ${canEdit ? `
            <button onclick="editTerminplanung()" class="px-4 py-2 bg-blue-100 text-blue-700 rounded hover:bg-blue-200">
              Bearbeiten
            </button>
            <button onclick="cancelTerminplanung()" class="px-4 py-2 bg-red-100 text-red-700 rounded hover:bg-red-200">
              Stornieren
            </button>
          ` : ''}
          ${canVote ? `
            ${terminplanung.abstimmungen.some(a => a.userId === currentUser?.id && a.stimme === 'APPROVE' && a.version === terminplanung.version) ? `
              <button onclick="window.zustimmungEntziehen(${terminplanung.id})" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 font-medium">
                ❌ Zustimmung entziehen
              </button>
            ` : `
              <button onclick="window.zustimmen(${terminplanung.id})" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 font-medium">
                ✅ Zustimmen
              </button>
            `}
          ` : ''}
          <button onclick="window.openKommentarModal()" class="px-4 py-2 bg-yellow-100 text-yellow-700 rounded hover:bg-yellow-200">
            Kommentieren
          </button>
        </div>

        <!-- Abstimmungen -->
        <div class="mb-6">
          <h3 class="font-semibold text-gray-900 mb-3">
            Abstimmungen (<a href="#aenderungen" class="text-blue-600 hover:text-blue-800 underline">Version ${terminplanung.version}</a>)
          </h3>
          <div class="space-y-2">
            ${terminplanung.abstimmungen
              .filter(a => a.version === terminplanung.version)
              .map(abstimmung => `
                <div class="flex items-center justify-between p-3 bg-gray-50 rounded">
                  <div class="flex items-center gap-3">
                    <span class="font-medium">${abstimmung.userId === currentUser?.id ? 'Du' : abstimmung.user.name}</span>
                    <span class="px-2 py-1 rounded text-xs ${
                      abstimmung.stimme === 'APPROVE' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                    }">
                      ${abstimmung.stimme === 'APPROVE' ? `✅ ${abstimmung.userId === currentUser?.id ? 'hast' : 'hat'} zugestimmt` : '❓ Mehr Infos'}
                    </span>
                  </div>
                  <span class="text-sm text-gray-500">
                    ${new Date(abstimmung.createdAt).toLocaleDateString('de-DE')}
                  </span>
                </div>
                ${abstimmung.kommentar ? `
                  <div class="ml-6 p-2 bg-white rounded text-sm text-gray-700">
                    "${abstimmung.kommentar}"
                  </div>
                ` : ''}
              `).join('')}
            ${terminplanung.abstimmungen.filter(a => a.version === terminplanung.version).length === 0 ? 
              '<p class="text-gray-500 text-sm">Noch keine Abstimmungen</p>' : ''}
          </div>
        </div>

        <!-- Status-Info -->
        ${terminplanung.status === 'PENDING' ? `
          <div class="mt-4 p-3 bg-orange-50 border border-orange-200 rounded">
            <div class="flex items-center gap-2">
              <span class="text-orange-600">⏳</span>
              <span class="text-sm text-orange-800">
                Warten auf Abstimmungen der anderen Mitglieder
              </span>
            </div>
          </div>
        ` : terminplanung.status === 'DISCUSSING' ? `
          <div class="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded">
            <div class="flex items-center gap-2">
              <span class="text-yellow-600">💬</span>
              <span class="text-sm text-yellow-800">
                In Diskussion - es gibt Kommentare oder "Mehr Infos" Stimmen
              </span>
            </div>
          </div>
        ` : terminplanung.status === 'APPROVED' ? `
          <div class="mt-4 p-3 bg-green-50 border border-green-200 rounded">
            <div class="flex items-center gap-2">
              <span class="text-green-600">✅</span>
              <span class="text-sm text-green-800">
                Termin ist freigegeben - alle haben zugestimmt!
              </span>
            </div>
          </div>
        ` : ''}
      </div>

      <!-- Kommentare -->
      <div class="mb-6">
        <h3 class="font-semibold text-gray-900 mb-3">Kommentare</h3>
        <div class="space-y-3">
          ${terminplanung.kommentare
            .filter(kommentar => !kommentar.parentId) // Nur Top-Level Kommentare
            .map(kommentar => `
              <div class="p-3 bg-gray-50 rounded">
                <div class="flex items-center justify-between mb-1">
                  <span class="font-medium text-sm">${kommentar.user.name}</span>
                  <span class="text-xs text-gray-500">
                    ${new Date(kommentar.createdAt).toLocaleDateString('de-DE')} 
                    ${new Date(kommentar.createdAt).toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' })}
                  </span>
                </div>
                <p class="text-gray-700">${kommentar.inhalt}</p>
                
                <!-- Antworten anzeigen -->
                ${kommentar.replies && kommentar.replies.length > 0 ? `
                  <div class="mt-2 ml-6 space-y-2 border-l-2 border-gray-300 pl-3">
                    ${kommentar.replies.map(reply => `
                      <div class="bg-gray-100 p-2 rounded">
                        <div class="flex items-center justify-between mb-1">
                          <span class="font-medium text-xs">${reply.user.name}</span>
                          <span class="text-xs text-gray-500">
                            ${new Date(reply.createdAt).toLocaleDateString('de-DE')} 
                            ${new Date(reply.createdAt).toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' })}
                          </span>
                        </div>
                        <p class="text-xs text-gray-700">${reply.inhalt}</p>
                      </div>
                    `).join('')}
                  </div>
                ` : ''}
                
                <!-- Antwort-Button -->
                <button onclick="window.antworten(${terminplanung.id}, ${kommentar.id})" class="mt-2 text-xs text-blue-600 hover:text-blue-800">
                  Antworten
                </button>
              </div>
            `).join('')}
          ${terminplanung.kommentare.filter(k => !k.parentId).length === 0 ? 
            '<p class="text-gray-500 text-sm">Noch keine Kommentare</p>' : ''}
        </div>
      </div>

      <!-- Änderungshistorie -->
      ${terminplanung.aenderungen.length > 0 ? `
        <div id="aenderungen">
          <h3 class="font-semibold text-gray-900 mb-3">Änderungshistorie</h3>
          <div class="space-y-2">
            ${terminplanung.aenderungen.map(aenderung => `
              <div class="p-3 bg-blue-50 rounded text-sm">
                <div class="font-medium">${aenderung.user.name} hat die Termine geändert</div>
                <div class="text-gray-600 mt-1">
                  <strong>Von:</strong> ${new Date(aenderung.alteStartDatum).toLocaleDateString('de-DE')} - 
                  ${new Date(aenderung.alteEndDatum).toLocaleDateString('de-DE')}<br>
                  <strong>Zu:</strong> ${new Date(aenderung.neueStartDatum).toLocaleDateString('de-DE')} - 
                  ${new Date(aenderung.neueEndDatum).toLocaleDateString('de-DE')}
                </div>
                ${aenderung.grund ? `
                  <div class="mt-1 text-gray-700">"${aenderung.grund}"</div>
                ` : ''}
                <div class="text-xs text-gray-500 mt-1">
                  ${new Date(aenderung.createdAt).toLocaleDateString('de-DE')}
                </div>
              </div>
            `).join('')}
          </div>
        </div>
      ` : ''}
    `;
  }

  // Globale Funktionen
  window.openKommentarModal = function() {
    const terminplanungIdEl = document.getElementById('kommentarTerminplanungId');
    const parentIdEl = document.getElementById('kommentarParentId');
    const modal = document.getElementById('kommentarModal');
    if (terminplanungIdEl && parentIdEl && modal) {
      terminplanungIdEl.value = terminplanung.id.toString();
      parentIdEl.value = '';
      modal.classList.remove('hidden');
    }
  };

  window.closeKommentarModal = function() {
    const modal = document.getElementById('kommentarModal');
    const form = document.getElementById('kommentarForm');
    if (modal) modal.classList.add('hidden');
    if (form) form.reset();
  };

  window.antworten = function(terminplanungId, parentId) {
    const terminplanungIdEl = document.getElementById('kommentarTerminplanungId');
    const parentIdEl = document.getElementById('kommentarParentId');
    const modal = document.getElementById('kommentarModal');
    if (terminplanungIdEl && parentIdEl && modal) {
      terminplanungIdEl.value = terminplanungId.toString();
      parentIdEl.value = parentId.toString();
      modal.classList.remove('hidden');
    }
  };

  window.zustimmen = async function(terminplanungId) {
    try {
      const response = await fetch(`/api/terminplanung/${terminplanungId}/abstimmung`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ stimme: 'APPROVE', kommentar: '' })
      });
      if (response.ok) {
        showToast('success', 'Zustimmung abgegeben', 'Deine Zustimmung wurde erfolgreich gespeichert!');
        loadTerminplanung();
      } else {
        const error = await response.json();
        showToast('error', 'Fehler', error.error);
      }
    } catch (error) {
      console.error('Fehler beim Zustimmen:', error);
      showToast('error', 'Fehler', 'Beim Zustimmen ist ein Fehler aufgetreten');
    }
  };

  window.zustimmungEntziehen = async function(terminplanungId) {
    try {
      const response = await fetch(`/api/terminplanung/${terminplanungId}/abstimmung`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' }
      });
      if (response.ok) {
        showToast('info', 'Zustimmung entzogen', 'Deine Zustimmung wurde erfolgreich zurückgezogen!');
        loadTerminplanung();
      } else {
        const error = await response.json();
        showToast('error', 'Fehler', error.error);
      }
    } catch (error) {
      console.error('Fehler beim Entziehen der Zustimmung:', error);
      showToast('error', 'Fehler', 'Beim Entziehen der Zustimmung ist ein Fehler aufgetreten');
    }
  };

  window.editTerminplanung = function() {
    const modal = document.getElementById('editModal');
    if (modal) {
      const titelInput = document.getElementById('editTitel');
      const startDatumInput = document.getElementById('editStartDatum');
      const endDatumInput = document.getElementById('editEndDatum');
      const beschreibungInput = document.getElementById('editBeschreibung');
      
      if (titelInput) titelInput.value = terminplanung.titel || '';
      if (startDatumInput) startDatumInput.value = new Date(terminplanung.startDatum).toISOString().split('T')[0];
      if (endDatumInput) endDatumInput.value = new Date(terminplanung.endDatum).toISOString().split('T')[0];
      if (beschreibungInput) beschreibungInput.value = terminplanung.beschreibung || '';
      
      modal.classList.remove('hidden');
    }
  };

  window.cancelTerminplanung = async function() {
    if (confirm('Möchtest du diese Terminplanung wirklich stornieren? Diese Aktion kann nicht rückgängig gemacht werden und löscht alle Kommentare und Abstimmungen.')) {
      try {
        const response = await fetch(`/api/terminplanung/${terminplanung.id}`, {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' }
        });
        
        if (response.ok) {
          showToast('success', 'Storniert', 'Die Terminplanung wurde erfolgreich storniert und gelöscht!');
          // Weiterleitung zur Terminplanung-Übersicht
          setTimeout(() => {
            window.location.href = '/terminplanung';
          }, 1500);
        } else {
          const error = await response.json();
          showToast('error', 'Fehler', error.error);
        }
      } catch (error) {
        console.error('Fehler beim Stornieren der Terminplanung:', error);
        showToast('error', 'Fehler', 'Beim Stornieren der Terminplanung ist ein Fehler aufgetreten');
      }
    }
  };

  // Event Listeners
  const abstimmungCancelBtn = document.getElementById('abstimmungCancelBtn');
  const kommentarCancelBtn = document.getElementById('kommentarCancelBtn');
  const editCancelBtn = document.getElementById('editCancelBtn');

  if (abstimmungCancelBtn) {
    abstimmungCancelBtn.addEventListener('click', () => {
      document.getElementById('abstimmungModal').classList.add('hidden');
    });
  }

  if (kommentarCancelBtn) {
    kommentarCancelBtn.addEventListener('click', window.closeKommentarModal);
  }

  if (editCancelBtn) {
    editCancelBtn.addEventListener('click', () => {
      const modal = document.getElementById('editModal');
      if (modal) modal.classList.add('hidden');
    });
  }

  const abstimmungForm = document.getElementById('abstimmungForm');
  const kommentarForm = document.getElementById('kommentarForm');
  const editForm = document.getElementById('editForm');

  if (abstimmungForm) {
    abstimmungForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = {
        stimme: formData.get('stimme'),
        kommentar: formData.get('kommentar')
      };
      try {
        const response = await fetch(`/api/terminplanung/${terminplanungId}/abstimmung`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        if (response.ok) {
          document.getElementById('abstimmungModal').classList.add('hidden');
          showToast('success', 'Abstimmung abgegeben', 'Deine Stimme wurde erfolgreich gespeichert!');
          loadTerminplanung();
        } else {
          const error = await response.json();
          showToast('error', 'Fehler', error.error);
        }
      } catch (error) {
        console.error('Fehler beim Abgeben der Abstimmung:', error);
        showToast('error', 'Fehler', 'Beim Abgeben der Abstimmung ist ein Fehler aufgetreten');
      }
    });
  }

  if (kommentarForm) {
    kommentarForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = {
        inhalt: formData.get('kommentarInhalt'),
        parentId: formData.get('parentId') ? parseInt(formData.get('parentId')) : null
      };
      try {
        const response = await fetch(`/api/terminplanung/${terminplanungId}/kommentar`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        if (response.ok) {
          window.closeKommentarModal();
          showToast('success', 'Kommentar hinzugefügt', 'Dein Kommentar wurde erfolgreich gespeichert!');
          loadTerminplanung();
        } else {
          const error = await response.json();
          showToast('error', 'Fehler', error.error);
        }
      } catch (error) {
        console.error('Fehler beim Erstellen des Kommentars:', error);
        showToast('error', 'Fehler', 'Beim Erstellen des Kommentars ist ein Fehler aufgetreten');
      }
    });
  }

  if (editForm) {
    editForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = {
        titel: formData.get('titel'),
        startDatum: new Date(formData.get('startDatum')).toISOString(),
        endDatum: new Date(formData.get('endDatum')).toISOString(),
        beschreibung: formData.get('beschreibung')
      };
      try {
        const response = await fetch(`/api/terminplanung/${terminplanung.id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        if (response.ok) {
          showToast('success', 'Terminplanung aktualisiert', 'Die Terminplanung wurde erfolgreich gespeichert! Alle Abstimmungen wurden zurückgesetzt.');
          const modal = document.getElementById('editModal');
          if (modal) modal.classList.add('hidden');
          loadTerminplanung();
        } else {
          const error = await response.json();
          showToast('error', 'Fehler', error.error);
        }
      } catch (error) {
        console.error('Fehler beim Aktualisieren der Terminplanung:', error);
        showToast('error', 'Fehler', 'Beim Aktualisieren der Terminplanung ist ein Fehler aufgetreten');
      }
    });
  }

  // Toast Close Button Event Listener
  const toastCloseBtn = document.getElementById('toast-close');
  if (toastCloseBtn) {
    toastCloseBtn.addEventListener('click', hideToast);
  }

  // Initialisierung
  console.log('🔍 DEBUG: Initialisierung gestartet');
  loadCurrentUser().then(() => {
    loadTerminplanung();
  });
</script>