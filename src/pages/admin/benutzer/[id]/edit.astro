---
import ProtectedLayout from '../../../../layouts/ProtectedLayout.astro';
import { requireAdmin } from '../../../../utils/auth';
import { PrismaClient } from '@prisma/client';

// Admin-Berechtigung prüfen
try {
  await requireAdmin(Astro);
} catch (error) {
  return Astro.redirect('/login');
}

const prisma = new PrismaClient();
let user = null;

try {
  const userId = parseInt(Astro.params.id);
  user = await prisma.user.findUnique({
    where: { id: userId },
    select: {
      id: true,
      name: true,
      email: true,
      role: true,
      createdAt: true,
    },
  });

  if (!user) {
    return Astro.redirect('/admin/benutzer');
  }
} catch (error) {
  console.error('Fehler beim Laden des Benutzers:', error);
  return Astro.redirect('/admin/benutzer');
} finally {
  await prisma.$disconnect();
}

const userName = user.name;
const userEmail = user.email;
const userRole = user.role;
const userIdValue = user.id;
const createdAt = new Date(user.createdAt).toLocaleDateString('de-DE', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
  hour: '2-digit',
  minute: '2-digit'
});
---

<ProtectedLayout title={`Benutzer bearbeiten - ${userName}`}>
  <div class="px-4 sm:px-6 lg:px-8">
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 dark:text-white">
            Benutzer bearbeiten
          </h1>
          <p class="mt-2 text-gray-600 dark:text-gray-400">
            Bearbeiten Sie die Informationen für <strong>{userName}</strong>
          </p>
        </div>
        <div class="flex space-x-3">
          <a href="/admin/benutzer" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md text-sm font-medium">
            ← Zurück zur Übersicht
          </a>
        </div>
      </div>
    </div>

    <!-- Bearbeitungsformular -->
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
      <div class="px-4 py-5 sm:p-6">
        <form id="edit-user-form" class="space-y-6">
          <input type="hidden" id="user-id" value={userIdValue} />
          
          <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
            <div>
              <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Name
              </label>
              <input 
                type="text" 
                id="name" 
                name="name" 
                value={userName}
                required 
                class="mt-1 block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                E-Mail
              </label>
              <input 
                type="email" 
                id="email" 
                name="email" 
                value={userEmail}
                required 
                class="mt-1 block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label for="role" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Rolle
              </label>
              <select 
                id="role" 
                name="role" 
                required 
                class="mt-1 block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="USER" selected={userRole === 'USER' ? true : undefined}>Benutzer</option>
                <option value="ADMIN" selected={userRole === 'ADMIN' ? true : undefined}>Administrator</option>
              </select>
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Erstellt am
              </label>
              <div class="mt-1 text-sm text-gray-500 dark:text-gray-400">
                {createdAt}
              </div>
            </div>
          </div>

          <div class="flex justify-end space-x-3 pt-6 border-t border-gray-200 dark:border-gray-700">
            <a href="/admin/benutzer" class="bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-2 rounded-md text-sm font-medium">
              Abbrechen
            </a>
            <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium">
              Speichern
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</ProtectedLayout>

<script>
  // Benutzer bearbeiten
  async function updateUser(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const userId = document.getElementById('user-id').value;
    const userData = {
      id: userId,
      name: formData.get('name'),
      email: formData.get('email'),
      role: formData.get('role')
    };

    try {
      const response = await fetch('/api/users', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData),
      });

      if (response.ok) {
        alert('Benutzer erfolgreich aktualisiert!');
        window.location.href = '/admin/benutzer';
      } else {
        const error = await response.json();
        alert(`Fehler: ${error.error}`);
      }
    } catch (error) {
      console.error('Fehler beim Aktualisieren des Benutzers:', error);
      alert('Fehler beim Aktualisieren des Benutzers');
    }
  }

  // Event-Listener
  document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('edit-user-form').addEventListener('submit', updateUser);
  });
</script>