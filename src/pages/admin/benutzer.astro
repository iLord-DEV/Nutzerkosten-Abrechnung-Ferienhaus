---
import ProtectedLayout from '../../layouts/ProtectedLayout.astro';
import { requireAdmin } from '../../utils/auth';

// Admin-Berechtigung prüfen
try {
  await requireAdmin(Astro);
} catch (error) {
  return Astro.redirect('/login');
}
---

<ProtectedLayout title="Benutzer verwalten - Nutzerkosten">
  <div class="px-4 sm:px-6 lg:px-8">
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 dark:text-white">
            Benutzer verwalten
          </h1>
          <p class="mt-2 text-gray-600 dark:text-gray-400">
            Hier können Sie alle Benutzer des Systems verwalten.
          </p>
        </div>
        <div class="flex space-x-3">
          <a href="/admin/dashboard" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md text-sm font-medium">
            ← Zurück zum Dashboard
          </a>
          <button onclick="openCreateUserModal()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium">
            ➕ Neuen Benutzer
          </button>
        </div>
      </div>
    </div>

    <!-- Benutzer-Tabelle -->
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
      <div class="px-4 py-5 sm:p-6">
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead class="bg-gray-50 dark:bg-gray-700">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Name
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  E-Mail
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Rolle
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Erstellt
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Aktionen
                </th>
              </tr>
            </thead>
            <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700" id="benutzer-tbody">
              <!-- Wird dynamisch geladen -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal für neuen Benutzer -->
  <div id="create-user-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-gray-800">
      <div class="mt-3">
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">
          Neuen Benutzer erstellen
        </h3>
        <form id="create-user-form" class="space-y-4">
          <div>
            <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Name</label>
            <input type="text" id="name" name="name" required class="mt-1 block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
          </div>
          <div>
            <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">E-Mail</label>
            <input type="email" id="email" name="email" required class="mt-1 block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
          </div>
          <div>
            <label for="role" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Rolle</label>
            <select id="role" name="role" required class="mt-1 block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
              <option value="USER">Benutzer</option>
              <option value="ADMIN">Administrator</option>
            </select>
          </div>
          <div>
            <label for="password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Passwort</label>
            <input type="password" id="password" name="password" required class="mt-1 block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
          </div>
          <div class="flex justify-end space-x-3">
            <button type="button" onclick="closeCreateUserModal()" class="bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-2 rounded-md text-sm font-medium">
              Abbrechen
            </button>
            <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium">
              Erstellen
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Modal für Benutzer bearbeiten -->
  <div id="edit-user-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-gray-800">
      <div class="mt-3">
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">
          Benutzer bearbeiten
        </h3>
        <form id="edit-user-form" class="space-y-4">
          <input type="hidden" id="edit-user-id" name="id">
          <div>
            <label for="edit-name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Name</label>
            <input type="text" id="edit-name" name="name" required class="mt-1 block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
          </div>
          <div>
            <label for="edit-email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">E-Mail</label>
            <input type="email" id="edit-email" name="email" required class="mt-1 block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
          </div>
          <div>
            <label for="edit-role" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Rolle</label>
            <select id="edit-role" name="role" required class="mt-1 block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
              <option value="USER">Benutzer</option>
              <option value="ADMIN">Administrator</option>
            </select>
          </div>
          <div class="flex justify-end space-x-3">
            <button type="button" onclick="closeEditUserModal()" class="bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-2 rounded-md text-sm font-medium">
              Abbrechen
            </button>
            <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium">
              Speichern
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</ProtectedLayout>

<script>
  let currentUser = null;
  let benutzer = [];

  // Benutzer-Informationen laden
  async function loadUserInfo() {
    try {
      const response = await fetch('/api/auth/me');
      if (response.ok) {
        currentUser = await response.json();
        if (currentUser.role !== 'ADMIN') {
          window.location.href = '/dashboard';
        }
      } else {
        window.location.href = '/login';
      }
    } catch (error) {
      console.error('Fehler beim Laden der Benutzer-Informationen:', error);
      window.location.href = '/login';
    }
  }

  // Benutzer laden
  async function loadBenutzer() {
    try {
      const response = await fetch('/api/users');
      if (response.ok) {
        benutzer = await response.json();
        renderBenutzer();
      }
    } catch (error) {
      console.error('Fehler beim Laden der Benutzer:', error);
    }
  }

  // Benutzer rendern
  function renderBenutzer() {
    const tbody = document.getElementById('benutzer-tbody');
    if (!tbody) return;

    tbody.innerHTML = '';
    
    benutzer.forEach((user) => {
      const row = document.createElement('tr');
      const createdAt = new Date(user.createdAt).toLocaleDateString('de-DE');
      
      row.innerHTML = `
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
          ${user.name}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
          ${user.email}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
            user.role === 'ADMIN' 
              ? 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200' 
              : 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'
          }">
            ${user.role}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
          ${createdAt}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
          <button onclick="editUser(${user.id})" class="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300 mr-3">
            Bearbeiten
          </button>
          <button onclick="deleteUser(${user.id})" class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300">
            Löschen
          </button>
        </td>
      `;
      
      tbody.appendChild(row);
    });
  }

  // Modal für neuen Benutzer öffnen
  function openCreateUserModal() {
    document.getElementById('create-user-modal').classList.remove('hidden');
  }

  // Modal für neuen Benutzer schließen
  function closeCreateUserModal() {
    document.getElementById('create-user-modal').classList.add('hidden');
    document.getElementById('create-user-form').reset();
  }

  // Modal für Benutzer bearbeiten öffnen
  function editUser(userId) {
    const user = benutzer.find(u => u.id === userId);
    if (!user) return;

    document.getElementById('edit-user-id').value = user.id;
    document.getElementById('edit-name').value = user.name;
    document.getElementById('edit-email').value = user.email;
    document.getElementById('edit-role').value = user.role;
    
    document.getElementById('edit-user-modal').classList.remove('hidden');
  }

  // Modal für Benutzer bearbeiten schließen
  function closeEditUserModal() {
    document.getElementById('edit-user-modal').classList.add('hidden');
  }

  // Neuen Benutzer erstellen
  async function createUser(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const userData = {
      name: formData.get('name'),
      email: formData.get('email'),
      role: formData.get('role'),
      password: formData.get('password')
    };

    try {
      const response = await fetch('/api/users', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData),
      });

      if (response.ok) {
        closeCreateUserModal();
        await loadBenutzer();
        alert('Benutzer erfolgreich erstellt!');
      } else {
        const error = await response.json();
        alert(`Fehler: ${error.error}`);
      }
    } catch (error) {
      console.error('Fehler beim Erstellen des Benutzers:', error);
      alert('Fehler beim Erstellen des Benutzers');
    }
  }

  // Benutzer bearbeiten
  async function updateUser(event: any) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const userId = formData.get('id');
    const userData = {
      name: formData.get('name'),
      email: formData.get('email'),
      role: formData.get('role')
    };

    try {
      const response = await fetch(`/api/users/${userId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData),
      });

      if (response.ok) {
        closeEditUserModal();
        await loadBenutzer();
        alert('Benutzer erfolgreich aktualisiert!');
      } else {
        const error = await response.json();
        alert(`Fehler: ${error.error}`);
      }
    } catch (error) {
      console.error('Fehler beim Aktualisieren des Benutzers:', error);
      alert('Fehler beim Aktualisieren des Benutzers');
    }
  }

  // Benutzer löschen
  async function deleteUser(userId: any) {
    if (!confirm('Möchten Sie diesen Benutzer wirklich löschen?')) {
      return;
    }

    try {
      const response = await fetch(`/api/users/${userId}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        await loadBenutzer();
        alert('Benutzer erfolgreich gelöscht!');
      } else {
        const error = await response.json();
        alert(`Fehler: ${error.error}`);
      }
    } catch (error) {
      console.error('Fehler beim Löschen des Benutzers:', error);
      alert('Fehler beim Löschen des Benutzers');
    }
  }

  // Event-Listener
  document.addEventListener('DOMContentLoaded', () => {
    loadUserInfo();
    loadBenutzer();

    document.getElementById('create-user-form').addEventListener('submit', createUser);
    document.getElementById('edit-user-form').addEventListener('submit', updateUser);
  });
</script>
