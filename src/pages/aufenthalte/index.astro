---
import Layout from '../../layouts/Layout.astro';

// Zugriffskontrolle
const sessionCookie = Astro.cookies.get('session');
if (!sessionCookie) {
  return Astro.redirect('/login');
}

const session = JSON.parse(sessionCookie.value);
---

<Layout title="Aufenthalte - Nutzerkosten">
  <div class="w-full">
    <div class="sm:flex sm:items-center mb-8">
      <div class="sm:flex-auto">
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">
          {session.role === 'ADMIN' ? 'Alle Aufenthalte' : 'Meine Aufenthalte'}
        </h1>
        <p class="mt-2 text-gray-600 dark:text-gray-400">
          {session.role === 'ADMIN' 
            ? '√úbersicht aller Aufenthalte und √úberlappungsberechnung.' 
            : '√úbersicht deiner Aufenthalte und Kostenberechnung.'}
        </p>
      </div>
      <div class="mt-4 sm:mt-0 sm:ml-16 sm:flex-none">
        <a href="/aufenthalte/neu" class="inline-flex items-center justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 sm:w-auto">
          ‚ûï Neuer Aufenthalt
        </a>
      </div>
    </div>

    <!-- Filter und Suche -->
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg mb-6">
      <div class="px-4 py-5 sm:p-6">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label for="jahr" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Jahr
            </label>
            <select id="jahr" class="block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
              <option value="2024">2024</option>
              <option value="2023">2023</option>
            </select>
          </div>
          <div>
            <label for="status" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Status
            </label>
            <select id="status" class="block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
              <option value="">Alle</option>
              <option value="aktiv">Aktiv</option>
              <option value="abgeschlossen">Abgeschlossen</option>
            </select>
          </div>
          {session.role === 'ADMIN' && (
            <div>
              <label for="suche" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Suche
              </label>
              <input type="text" id="suche" placeholder="Name oder E-Mail..." class="block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
            </div>
          )}
          <div class="flex items-end">
            <button id="filter-btn" class="w-full bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md text-sm font-medium">
              üîç Filtern
            </button>
          </div>
        </div>
      </div>
    </div>



    <!-- Aufenthalte-Tabelle -->
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg w-full">
      <div class="px-4 py-5 sm:px-6">
        <div class="w-full">
          <table class="w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead class="bg-gray-50 dark:bg-gray-700">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Benutzer
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Ankunft
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Abreise
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Z√§hlerstand
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Personen
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Kosten (vor Einsparungen)
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  √úberlappungen
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Einsparungen
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Gesamtkosten
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Aktionen
                </th>
              </tr>
            </thead>
            <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700" id="aufenthalte-tbody">
              <!-- Wird dynamisch geladen -->
            </tbody>
          </table>
        </div>
        
        <!-- Lade-Animation -->
        <div id="loading" class="text-center py-8">
          <div class="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 dark:text-gray-400">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-gray-500 dark:text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Lade Aufenthalte...
          </div>
        </div>
        
        <!-- Keine Daten -->
        <div id="no-data" class="hidden text-center py-8">
          <div class="text-gray-500 dark:text-gray-400">
            <span class="text-4xl">üì≠</span>
            <p class="mt-2 text-lg font-medium">Keine Aufenthalte gefunden</p>
            <p class="mt-1">Erstellen Sie Ihren ersten Aufenthalt.</p>
          </div>
        </div>
        
        <!-- Toast-Benachrichtigung -->
        <div id="toast" class="hidden fixed top-4 right-4 z-50 max-w-sm w-full bg-white dark:bg-gray-800 shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5">
          <div class="p-4">
            <div class="flex items-start">
              <div class="flex-shrink-0">
                <div id="toast-icon" class="h-6 w-6">
                  <!-- Icon wird dynamisch gesetzt -->
                </div>
              </div>
              <div class="ml-3 w-0 flex-1 pt-0.5">
                <p id="toast-message" class="text-sm font-medium text-gray-900 dark:text-white">
                  <!-- Nachricht wird dynamisch gesetzt -->
                </p>
              </div>
              <div class="ml-4 flex-shrink-0 flex">
                <button id="toast-close" class="bg-white dark:bg-gray-800 rounded-md inline-flex text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500">
                  <span class="sr-only">Schlie√üen</span>
                  <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Best√§tigungs-Modal -->
        <div id="confirm-modal" class="hidden fixed inset-0 z-50 overflow-y-auto">
          <div class="flex items-center justify-center min-h-screen p-4">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
            <div class="relative bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full mx-auto">
              <div class="px-6 pt-6 pb-4">
                <div class="flex items-start">
                  <div class="flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
                    <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                    </svg>
                  </div>
                  <div class="ml-4 flex-1">
                    <h3 class="text-lg font-medium text-gray-900 dark:text-white">
                      Aufenthalt l√∂schen
                    </h3>
                    <div class="mt-2">
                      <p class="text-sm text-gray-500 dark:text-gray-400">
                        M√∂chten Sie diesen Aufenthalt wirklich l√∂schen? Diese Aktion kann nicht r√ºckg√§ngig gemacht werden.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              <div class="bg-gray-50 dark:bg-gray-700 px-6 py-4 flex justify-end space-x-3">
                <button id="cancel-delete" type="button" class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                  Abbrechen
                </button>
                <button id="confirm-delete" type="button" class="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                  L√∂schen
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  let currentAufenthalte: Array<{
    id: number;
    userId: number;
    ankunft: string;
    abreise: string;
    zaehlerAnkunft: number;
    zaehlerAbreise: number;
    anzahlMitglieder: number;
    anzahlGaeste: number;
    jahr: number;
    user: { name: string; email: string; role: string };
  }> = [];
  
  let currentPreise: {
    oelpreisProLiter?: number;
    uebernachtungMitglied?: number;
    uebernachtungGast?: number;
    verbrauchProStunde?: number;
  } = {};
  
  let allUeberlappungsAufenthalte: any[] = [];

  // Toast-Benachrichtigung anzeigen
  function showToast(message: string, type: 'success' | 'error' | 'info' = 'info') {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toast-message');
    const toastIcon = document.getElementById('toast-icon');
    
    if (!toast || !toastMessage || !toastIcon) return;
    
    // Nachricht setzen
    toastMessage.textContent = message;
    
    // Icon und Farbe je nach Typ setzen
    let iconHtml = '';
    let bgColor = '';
    
    switch (type) {
      case 'success':
        iconHtml = '‚úÖ';
        bgColor = 'bg-green-500';
        break;
      case 'error':
        iconHtml = '‚ùå';
        bgColor = 'bg-red-500';
        break;
      case 'info':
      default:
        iconHtml = '‚ÑπÔ∏è';
        bgColor = 'bg-blue-500';
        break;
    }
    
    toastIcon.innerHTML = iconHtml;
    toastIcon.className = `h-6 w-6 ${bgColor} rounded-full flex items-center justify-center text-white`;
    
    // Toast anzeigen
    toast.classList.remove('hidden');
    
    // Automatisch nach 5 Sekunden ausblenden
    setTimeout(() => {
      hideToast();
    }, 5000);
  }
  
  // Toast-Benachrichtigung ausblenden
  function hideToast() {
    const toast = document.getElementById('toast');
    if (toast) {
      toast.classList.add('hidden');
    }
  }
  
  // Best√§tigungs-Modal anzeigen
  function showConfirmModal(aufenthaltId: number) {
    const modal = document.getElementById('confirm-modal');
    if (modal) {
      modal.classList.remove('hidden');
      
      // Event-Listener f√ºr Best√§tigung
      const confirmBtn = document.getElementById('confirm-delete');
      const cancelBtn = document.getElementById('cancel-delete');
      
      if (confirmBtn) {
        confirmBtn.onclick = () => {
          hideConfirmModal();
          performDelete(aufenthaltId);
        };
      }
      
      if (cancelBtn) {
        cancelBtn.onclick = () => {
          hideConfirmModal();
        };
      }
      
      // Modal schlie√üen bei Klick auf Hintergrund
      modal.onclick = (e) => {
        if (e.target === modal) {
          hideConfirmModal();
        }
      };
    }
  }
  
  // Best√§tigungs-Modal ausblenden
  function hideConfirmModal() {
    const modal = document.getElementById('confirm-modal');
    if (modal) {
      modal.classList.add('hidden');
    }
  }
  
  // Tats√§chliches L√∂schen durchf√ºhren
  async function performDelete(id: number) {
    console.log('üóëÔ∏è F√ºhre L√∂schung durch f√ºr ID:', id);
    
    try {
      const response = await fetch(`/api/aufenthalte/${id}`, {
        method: 'DELETE',
      });
      
      console.log('üì° DELETE Response Status:', response.status);
      
      if (response.ok) {
        console.log('‚úÖ L√∂schen erfolgreich, leere Caches...');
        clearAllCaches();
        showToast('Aufenthalt erfolgreich gel√∂scht!', 'success');
        loadAufenthalte();
      } else {
        const errorData = await response.json().catch(() => ({ error: 'Unbekannter Fehler' }));
        console.error('‚ùå L√∂schen fehlgeschlagen:', errorData);
        showToast('Fehler beim L√∂schen: ' + (errorData.error || 'Unbekannter Fehler'), 'error');
      }
    } catch (error) {
      console.error('‚ùå Netzwerk-Fehler beim L√∂schen:', error);
      showToast('Netzwerk-Fehler beim L√∂schen', 'error');
    }
  }
  
  // Direkte L√∂schung f√ºr den Button
  async function deleteAufenthaltDirectly(id: number) {
    console.log('üóëÔ∏è Direkte L√∂schung f√ºr ID:', id);
    
    try {
      const response = await fetch(`/api/aufenthalte/${id}`, {
        method: 'DELETE',
      });
      
      console.log('üì° DELETE Response Status:', response.status);
      
      if (response.ok) {
        console.log('‚úÖ L√∂schen erfolgreich, leere Caches...');
        clearAllCaches();
        showToast('Aufenthalt erfolgreich gel√∂scht!', 'success');
        loadAufenthalte();
      } else {
        const errorData = await response.json().catch(() => ({ error: 'Unbekannter Fehler' }));
        console.error('‚ùå L√∂schen fehlgeschlagen:', errorData);
        showToast('Fehler beim L√∂schen: ' + (errorData.error || 'Unbekannter Fehler'), 'error');
      }
    } catch (error) {
      console.error('‚ùå Netzwerk-Fehler beim L√∂schen:', error);
      showToast('Netzwerk-Fehler beim L√∂schen', 'error');
    }
  }

  // Alle Caches leeren
  function clearAllCaches() {
    // JavaScript-Variablen zur√ºcksetzen
    currentAufenthalte = [];
    allUeberlappungsAufenthalte = [];
    currentPreise = {};
    
    // localStorage leeren (falls vorhanden)
    if (typeof localStorage !== 'undefined') {
      localStorage.clear();
    }
    
    // SessionStorage leeren (falls vorhanden)
    if (typeof sessionStorage !== 'undefined') {
      sessionStorage.clear();
    }
    
    // Browser-Cache f√ºr diese Domain leeren
    if ('caches' in window) {
      caches.keys().then(names => {
        names.forEach(name => {
          caches.delete(name);
        });
      });
    }
    
    console.log('üßπ Alle Caches wurden geleert');
  }

  // √úberlappungsaufenthalte laden
  async function loadUeberlappungsAufenthalte(jahr: string) {
    try {
      const response = await fetch('/api/aufenthalte/ueberlappungen', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          eigeneAufenthalte: currentAufenthalte,
          jahr: jahr
        })
      });
      
      if (response.ok) {
        allUeberlappungsAufenthalte = await response.json();
        console.log('üìä √úberlappungsaufenthalte geladen:', allUeberlappungsAufenthalte.length);
      }
    } catch (error) {
      console.error('‚ùå Fehler beim Laden der √úberlappungsaufenthalte:', error);
    }
  }
  
  // √úberlappungsinfo f√ºr einen Aufenthalt ermitteln
  function getUeberlappungsInfo(aufenthalt: any, alleUeberlappungen: any[]) {
    return alleUeberlappungen.filter((overlap: any) => {
      // √úberlappung pr√ºfen: Z√§hlerst√§nde √ºberschneiden sich
      const a1Start = aufenthalt.zaehlerAnkunft;
      const a1Ende = aufenthalt.zaehlerAbreise;
      const a2Start = overlap.zaehlerAnkunft;
      const a2Ende = overlap.zaehlerAbreise;
      
      // Echte √úberlappung liegt vor wenn: a1Ende > a2Start UND a1Start < a2Ende
      // UND der √úberlappungsbereich ist gr√∂√üer als 0.1 Stunden
      const overlapStart = Math.max(a1Start, a2Start);
      const overlapEnd = Math.min(a1Ende, a2Ende);
      const overlapHours = overlapEnd - overlapStart;
      
      // Nur echte √úberlappungen mit mindestens 0.1 Stunden
      return overlapHours >= 0.1;
    });
  }

  // Aufenthalte aus der API laden
  async function loadAufenthalte() {
    try {
      showLoading(true);
      const jahrSelect = document.getElementById('jahr') as HTMLSelectElement;
      const jahr = jahrSelect ? jahrSelect.value : '2024';
      
      console.log('üîç Lade Aufenthalte f√ºr Jahr:', jahr);
      const response = await fetch(`/api/aufenthalte?jahr=${jahr}`);
      console.log('üì° API Response Status:', response.status);
      
      if (response.ok) {
        currentAufenthalte = await response.json();
        console.log('üìä Aufenthalte geladen:', currentAufenthalte.length);
        console.log('üìã Erste 2 Aufenthalte:', currentAufenthalte.slice(0, 2));
        
        // √úberlappungsaufenthalte laden
        await loadUeberlappungsAufenthalte(jahr);
        
        renderAufenthalte(currentAufenthalte);
      } else {
        console.error('‚ùå Fehler beim Laden der Aufenthalte');
        showNoData();
      }
    } catch (error) {
      console.error('‚ùå Fehler beim Laden der Aufenthalte:', error);
      showNoData();
    } finally {
      showLoading(false);
    }
  }

  // Preise laden
  async function loadPreise(jahr: string) {
    try {
      const response = await fetch(`/api/preise?jahr=${jahr}`);
      if (response.ok) {
        currentPreise = await response.json();
      }
    } catch (error) {
      console.error('Fehler beim Laden der Preise:', error);
    }
  }

  // √ñlpreis f√ºr ein spezifisches Datum laden
  async function getOelpreisFuerDatum(datum: Date): Promise<number> {
    try {
      const datumString = datum.toISOString().split('T')[0]; // YYYY-MM-DD Format
      const response = await fetch(`/api/preise?jahr=${datum.getFullYear()}&datum=${datumString}`);
      if (response.ok) {
        const preise = await response.json();
        return preise.oelpreisProLiter || 1.01; // Fallback auf 1.01‚Ç¨
      }
    } catch (error) {
      console.error('Fehler beim Laden des √ñlpreises f√ºr Datum:', error);
    }
    return 1.01; // Fallback bei Fehlern
  }

  // Aufenthalte rendern
  function renderAufenthalte(aufenthalte: typeof currentAufenthalte) {
    console.log('üé® renderAufenthalte aufgerufen mit', aufenthalte.length, 'Aufenthalten');
    const tbody = document.getElementById('aufenthalte-tbody');
    if (!tbody) {
      console.error('‚ùå tbody Element nicht gefunden');
      return;
    }

    if (aufenthalte.length === 0) {
      console.log('üì≠ Keine Aufenthalte vorhanden');
      showNoData();
      return;
    }

    tbody.innerHTML = '';
    
    aufenthalte.forEach((aufenthalt: typeof currentAufenthalte[0]) => {
      const row = document.createElement('tr');
      const ankunft = new Date(aufenthalt.ankunft).toLocaleDateString('de-DE');
      const abreise = new Date(aufenthalt.abreise).toLocaleDateString('de-DE');
      const zaehlerStart = aufenthalt.zaehlerAnkunft;
      const zaehlerEnde = aufenthalt.zaehlerAbreise;
      const verbrauchteStunden = zaehlerEnde - zaehlerStart;
      
      // Kosten berechnen - √ñlpreis f√ºr das Aufenthaltsdatum ermitteln
      const aufenthaltsDatum = new Date(aufenthalt.ankunft);
      // F√ºr die Anzeige verwenden wir den aktuellen Preis, die korrekte Berechnung erfolgt sp√§ter
      const oelKosten = verbrauchteStunden * (currentPreise.verbrauchProStunde || 5.5) * (currentPreise.oelpreisProLiter || 1.01);
      const anzahlNaechte = Math.ceil((new Date(aufenthalt.abreise).getTime() - new Date(aufenthalt.ankunft).getTime()) / (1000 * 60 * 60 * 24));
      const uebernachtungKosten = anzahlNaechte * (
        aufenthalt.anzahlMitglieder * (currentPreise.uebernachtungMitglied || 15) +
        aufenthalt.anzahlGaeste * (currentPreise.uebernachtungGast || 25)
      );
      const gesamtKosten = oelKosten + uebernachtungKosten;

      row.innerHTML = `
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="flex items-center">
            <div class="flex-shrink-0 h-10 w-10">
              <div class="h-10 w-10 rounded-full bg-blue-500 flex items-center justify-center">
                <span class="text-white text-sm font-medium">${aufenthalt.user.name.charAt(0)}</span>
              </div>
            </div>
            <div class="ml-4">
              <div class="text-sm font-medium text-gray-900 dark:text-white">
                ${aufenthalt.user.name}
              </div>
              <div class="text-sm text-gray-500 dark:text-gray-400">
                ${aufenthalt.user.email}
              </div>
            </div>
          </div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
          ${ankunft}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
          ${abreise}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
          ${zaehlerStart.toFixed(1)} h ‚Üí ${zaehlerEnde.toFixed(1)} h
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
          ${aufenthalt.anzahlMitglieder} + ${aufenthalt.anzahlGaeste} G√§ste
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
          ‚Ç¨ ${gesamtKosten.toFixed(2)}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
          <div id="overlap-info-${aufenthalt.id}">
            <!-- Wird dynamisch geladen -->
          </div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
          <div id="savings-info-${aufenthalt.id}">
            <!-- Wird dynamisch geladen -->
          </div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
          <div id="total-costs-${aufenthalt.id}">
            <!-- Wird dynamisch geladen -->
          </div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
          <a href="/aufenthalte/${aufenthalt.id}/edit" class="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300 mr-4">
            Bearbeiten (ID: ${aufenthalt.id})
          </a>
          <button onclick="(function(aufenthaltId) { 
            // Sch√∂nes Modal anzeigen
            const modal = document.getElementById('confirm-modal');
            if (modal) {
              modal.classList.remove('hidden');
              
              // Event-Listener f√ºr Best√§tigung
              const confirmBtn = document.getElementById('confirm-delete');
              const cancelBtn = document.getElementById('cancel-delete');
              
              if (confirmBtn) {
                confirmBtn.onclick = async () => {
                  modal.classList.add('hidden');
                  // L√∂schung direkt durchf√ºhren
                  console.log('üóëÔ∏è L√∂schung best√§tigt f√ºr ID:', aufenthaltId);
                  
                  try {
                    const response = await fetch('/api/aufenthalte/' + aufenthaltId, {
                      method: 'DELETE',
                    });
                    
                    console.log('üì° DELETE Response Status:', response.status);
                    
                    if (response.ok) {
                      console.log('‚úÖ L√∂schen erfolgreich, leere Caches...');
                      // Caches leeren
                      if (typeof clearAllCaches === 'function') {
                        clearAllCaches();
                      }
                      // Toast anzeigen
                      if (typeof showToast === 'function') {
                        showToast('Aufenthalt erfolgreich gel√∂scht!', 'success');
                      }
                      // Aufenthalte neu laden
                      if (typeof loadAufenthalte === 'function') {
                        loadAufenthalte();
                      } else {
                        window.location.reload();
                      }
                    } else {
                      const errorData = await response.json().catch(() => ({ error: 'Unbekannter Fehler' }));
                      console.error('‚ùå L√∂schen fehlgeschlagen:', errorData);
                      if (typeof showToast === 'function') {
                        showToast('Fehler beim L√∂schen: ' + (errorData.error || 'Unbekannter Fehler'), 'error');
                      }
                    }
                  } catch (error) {
                    console.error('‚ùå Netzwerk-Fehler beim L√∂schen:', error);
                    if (typeof showToast === 'function') {
                      showToast('Netzwerk-Fehler beim L√∂schen', 'error');
                    }
                  }
                };
              }
              
              if (cancelBtn) {
                cancelBtn.onclick = () => {
                  modal.classList.add('hidden');
                };
              }
              
              // Modal schlie√üen bei Klick auf Hintergrund
              modal.onclick = (e) => {
                if (e.target === modal) {
                  modal.classList.add('hidden');
                }
              };
            } else {
              // Fallback falls Modal nicht gefunden wird
              if (confirm('M√∂chten Sie diesen Aufenthalt wirklich l√∂schen?')) {
                // Einfache L√∂schung ohne Modal
                fetch('/api/aufenthalte/' + aufenthaltId, { method: 'DELETE' })
                  .then(r => { if(r.ok) window.location.reload(); })
                  .catch(e => console.error('Fehler:', e));
              }
            }
          })(${aufenthalt.id})" class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300">
            L√∂schen
          </button>
        </td>
      `;
      
      tbody.appendChild(row);
    });
    
    // √úberlappungsinfo f√ºr jeden Aufenthalt laden
    aufenthalte.forEach((aufenthalt: typeof currentAufenthalte[0]) => {
      loadOverlapInfo(aufenthalt);
    });
    

  }

  // Urspr√ºngliche Kosten berechnen (vor Einsparungen)
  async function calculateOriginalCosts(aufenthalt: any): Promise<number> {
    const zaehlerStart = aufenthalt.zaehlerAnkunft;
    const zaehlerEnde = aufenthalt.zaehlerAbreise;
    
    // Validierung: Z√§hlerende muss gr√∂√üer als Z√§hlerstart sein
    if (zaehlerEnde <= zaehlerStart) {
      console.warn(`‚ö†Ô∏è Ung√ºltige Z√§hlerst√§nde f√ºr Aufenthalt ${aufenthalt.id}: Start=${zaehlerStart}, Ende=${zaehlerEnde}`);
      return 0; // Keine Kosten bei ung√ºltigen Z√§hlerst√§nden
    }
    
    const verbrauchteStunden = zaehlerEnde - zaehlerStart;
    
    // √ñlkosten - korrekten √ñlpreis f√ºr das Aufenthaltsdatum ermitteln
    const aufenthaltsDatum = new Date(aufenthalt.ankunft);
    const oelpreis = await getOelpreisFuerDatum(aufenthaltsDatum);
    const oelKosten = verbrauchteStunden * (currentPreise.verbrauchProStunde || 5.5) * oelpreis;
    
    // √úbernachtungskosten
    const anzahlNaechte = Math.ceil((new Date(aufenthalt.abreise).getTime() - new Date(aufenthalt.ankunft).getTime()) / (1000 * 60 * 60 * 24));
    const uebernachtungKosten = anzahlNaechte * (
      aufenthalt.anzahlMitglieder * (currentPreise.uebernachtungMitglied || 15) +
      aufenthalt.anzahlGaeste * (currentPreise.uebernachtungGast || 25)
    );
    
    return oelKosten + uebernachtungKosten;
  }

  // Einsparungen durch √úberlappungen berechnen
  function calculateSavings(aufenthalt: any, overlaps: any[]): number {
    if (overlaps.length === 0) return 0;
    
    let totalSavings = 0;
    
    overlaps.forEach((overlap: any) => {
      // √úberlappungsbereich berechnen
      const overlapStart = Math.max(aufenthalt.zaehlerAnkunft, overlap.zaehlerAnkunft);
      const overlapEnd = Math.min(aufenthalt.zaehlerAbreise, overlap.zaehlerAbreise);
      
      // Validierung: √úberlappung muss mindestens 0.1 Stunden haben
      if (overlapEnd <= overlapStart) {
        console.warn(`‚ö†Ô∏è Keine echte √úberlappung: Start=${overlapStart}, Ende=${overlapEnd}`);
        return; // Keine Einsparung bei ung√ºltiger √úberlappung
      }
      
      const overlapHours = overlapEnd - overlapStart;
      
      // Nur Einsparungen bei echten √úberlappungen (mindestens 0.1 Stunden)
      if (overlapHours >= 0.1) {
        // √ñlkosten-Einsparung: √úberlappungsstunden werden aufgeteilt
        // F√ºr die Einsparungsberechnung verwenden wir den aktuellen Preis, da es sich um die gleiche Zeit handelt
        const oelKostenProStunde = (currentPreise.verbrauchProStunde || 5.5) * (currentPreise.oelpreisProLiter || 1.01);
        // Bei 2 Personen teilen sich beide die Kosten der √úberlappungsstunden
        // Jede Person spart 50% der Kosten der √úberlappungsstunden
        const oelSavings = overlapHours * oelKostenProStunde * 0.5;
        
        // √úbernachtungskosten-Einsparung: Gemeinsame Nutzung der Infrastruktur
        // Kleine Einsparung pro √úberlappungsstunde
        const uebernachtungSavings = overlapHours / 24 * 5;
        
        totalSavings += oelSavings + uebernachtungSavings;
        
        console.log(`üí∞ Einsparung f√ºr ${aufenthalt.user.name} mit ${overlap.user.name}: ${overlapHours.toFixed(1)}h = ‚Ç¨${(oelSavings + uebernachtungSavings).toFixed(2)}`);
      }
    });
    
    return totalSavings;
  }

  // √úberlappungsinfo f√ºr einzelnen Aufenthalt laden
  async function loadOverlapInfo(aufenthalt: typeof currentAufenthalte[0]) {
    try {
      const overlaps = getUeberlappungsInfo(aufenthalt, allUeberlappungsAufenthalte);
      const overlapDiv = document.getElementById(`overlap-info-${aufenthalt.id}`);
      const savingsDiv = document.getElementById(`savings-info-${aufenthalt.id}`);
      const totalCostsDiv = document.getElementById(`total-costs-${aufenthalt.id}`);
      
      if (overlapDiv) {
        if (overlaps.length === 0) {
          overlapDiv.innerHTML = `
            <span class="text-green-600 dark:text-green-400 text-xs">
              ‚úÖ Keine
            </span>
          `;
        } else {
          const overlapText = overlaps.map((overlap: any) => {
            const startZaehler = Math.max(aufenthalt.zaehlerAnkunft, overlap.zaehlerAnkunft);
            const endZaehler = Math.min(aufenthalt.zaehlerAbreise, overlap.zaehlerAbreise);
            const overlapHours = endZaehler - startZaehler;
            
            // Nur echte √úberlappungen anzeigen (mindestens 0.1 Stunden)
            if (overlapHours >= 0.1) {
              return `${overlap.user.name} (${startZaehler.toFixed(1)}h - ${endZaehler.toFixed(1)}h, ${overlapHours.toFixed(1)}h)`;
            } else {
              return `${overlap.user.name} (nur geteilter Zeitpunkt: ${overlapHours.toFixed(1)}h)`;
            }
          }).filter((text: string) => text).join('<br>');
          
          overlapDiv.innerHTML = `
            <span class="text-orange-600 dark:text-orange-400 text-xs">
              ‚ö†Ô∏è ${overlaps.length} √úberlappung${overlaps.length > 1 ? 'en' : ''}:<br>
              ${overlapText}
            </span>
          `;
        }
      }
      
      // Einsparungen berechnen und anzeigen
      if (savingsDiv) {
        const savings = calculateSavings(aufenthalt, overlaps);
        if (savings > 0) {
          savingsDiv.innerHTML = `
            <span class="text-green-600 dark:text-green-400 text-sm font-medium">
              üí∞ ‚Ç¨ ${savings.toFixed(2)}
            </span>
          `;
        } else {
          savingsDiv.innerHTML = `
            <span class="text-gray-500 dark:text-gray-400 text-sm">
              ‚Ç¨ 0.00
            </span>
          `;
        }
      }
      
      // Gesamtkosten berechnen und anzeigen (Kosten - Einsparungen)
      if (totalCostsDiv) {
        const savings = calculateSavings(aufenthalt, overlaps);
        calculateOriginalCosts(aufenthalt).then(originalCosts => {
          const totalCosts = originalCosts - savings;
          
          totalCostsDiv.innerHTML = `
            <span class="text-blue-600 dark:text-blue-400 text-sm font-medium">
              ‚Ç¨ ${totalCosts.toFixed(2)}
            </span>
          `;
        });
      }
    } catch (error) {
      console.error('‚ùå Fehler beim Laden der √úberlappungsinfo:', error);
    }
  }







  // Aufenthalt l√∂schen
  async function deleteAufenthalt(id: number) {
    // Sch√∂nes Modal anzeigen
    const modal = document.getElementById('confirm-modal');
    if (modal) {
      modal.classList.remove('hidden');
      
      // Event-Listener f√ºr Best√§tigung
      const confirmBtn = document.getElementById('confirm-delete');
      const cancelBtn = document.getElementById('cancel-delete');
      
      if (confirmBtn) {
        confirmBtn.onclick = () => {
          modal.classList.add('hidden');
          performDelete(id);
        };
      }
      
      if (cancelBtn) {
        cancelBtn.onclick = () => {
          modal.classList.add('hidden');
        };
      }
      
      // Modal schlie√üen bei Klick auf Hintergrund
      modal.onclick = (e) => {
        if (e.target === modal) {
          modal.classList.add('hidden');
        }
      };
    } else {
      // Fallback falls Modal nicht gefunden wird
      if (!confirm('M√∂chten Sie diesen Aufenthalt wirklich l√∂schen?')) {
        return;
      }
      performDelete(id);
    }
  }

  // Lade-Animation anzeigen/verstecken
  function showLoading(show: boolean) {
    const loading = document.getElementById('loading');
    if (loading) {
      loading.classList.toggle('hidden', !show);
    }
  }

  // Keine Daten anzeigen
  function showNoData() {
    const noData = document.getElementById('no-data');
    if (noData) {
      noData.classList.remove('hidden');
    }
  }

  // Event-Listener
  document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ DOM geladen, starte Initialisierung...');
    
    try {
      await loadPreise('2024');
      console.log('‚úÖ Preise geladen');
      
      await loadAufenthalte();
      console.log('‚úÖ Aufenthalte geladen');
      

      
      // Filter-Event-Listener
      const jahrSelect = document.getElementById('jahr');
      const statusSelect = document.getElementById('status');
      const filterBtn = document.getElementById('filter-btn');
      
      if (jahrSelect) {
        jahrSelect.addEventListener('change', loadAufenthalte);
        console.log('‚úÖ Jahr-Select Event-Listener gesetzt');
      }
      if (statusSelect) {
        statusSelect.addEventListener('change', loadAufenthalte);
        console.log('‚úÖ Status-Select Event-Listener gesetzt');
      }
      if (filterBtn) {
        filterBtn.addEventListener('click', loadAufenthalte);
        console.log('‚úÖ Filter-Button Event-Listener gesetzt');
      }
      
      console.log('üéØ Alle Event-Listener gesetzt!');
      
      // Cache leeren beim Verlassen der Seite
      window.addEventListener('beforeunload', clearAllCaches);
      
      // Cache leeren beim Neuladen der Seite
      window.addEventListener('unload', clearAllCaches);
      
      // Toast-Close-Button Event-Listener
      const toastClose = document.getElementById('toast-close');
      if (toastClose) {
        toastClose.addEventListener('click', hideToast);
      }
      
    } catch (error) {
      console.error('‚ùå Fehler bei der Initialisierung:', error);
    }
  });
</script>
