---
import Layout from '../../layouts/Layout.astro';

// Zugriffskontrolle
const sessionCookie = Astro.cookies.get('session');
if (!sessionCookie) {
  return Astro.redirect('/login');
}

const session = JSON.parse(sessionCookie.value);
---

<Layout title="Aufenthalte - Nutzerkosten">
  <div class="w-full">
    <div class="sm:flex sm:items-center mb-8">
      <div class="sm:flex-auto">
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">
          {session.role === 'ADMIN' ? 'Alle Aufenthalte' : 'Meine Aufenthalte'}
        </h1>
        <p class="mt-2 text-gray-600 dark:text-gray-400">
          {session.role === 'ADMIN' 
            ? '√úbersicht aller Aufenthalte und √úberlappungsberechnung.' 
            : '√úbersicht deiner Aufenthalte und Kostenberechnung.'}
        </p>
      </div>
      <div class="mt-4 sm:mt-0 sm:ml-16 sm:flex-none">
        <a href="/aufenthalte/neu" class="inline-flex items-center justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 sm:w-auto">
          ‚ûï Neuer Aufenthalt
        </a>
      </div>
    </div>

    <!-- Filter und Suche -->
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg mb-6">
      <div class="px-4 py-5 sm:p-6">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label for="jahr" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Jahr
            </label>
            <select id="jahr" class="block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
              <option value="2024">2024</option>
              <option value="2023">2023</option>
            </select>
          </div>
          <div>
            <label for="status" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Status
            </label>
            <select id="status" class="block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
              <option value="">Alle</option>
              <option value="aktiv">Aktiv</option>
              <option value="abgeschlossen">Abgeschlossen</option>
            </select>
          </div>
          {session.role === 'ADMIN' && (
            <div>
              <label for="suche" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Suche
              </label>
              <input type="text" id="suche" placeholder="Name oder E-Mail..." class="block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
            </div>
          )}
          <div class="flex items-end">
            <button id="filter-btn" class="w-full bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md text-sm font-medium">
              üîç Filtern
            </button>
          </div>
        </div>
      </div>
    </div>



    <!-- Aufenthalte-Tabelle -->
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg w-full">
      <div class="px-4 py-5 sm:px-6">
        <div class="w-full">
          <table class="w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead class="bg-gray-50 dark:bg-gray-700">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Benutzer
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Ankunft
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Abreise
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Z√§hlerstand
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Personen
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Kosten (vor Einsparungen)
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  √úberlappungen
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Einsparungen
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Gesamtkosten
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Aktionen
                </th>
              </tr>
            </thead>
            <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700" id="aufenthalte-tbody">
              <!-- Wird dynamisch geladen -->
            </tbody>
          </table>
        </div>
        
        <!-- Lade-Animation -->
        <div id="loading" class="text-center py-8">
          <div class="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 dark:text-gray-400">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-gray-500 dark:text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Lade Aufenthalte...
          </div>
        </div>
        
        <!-- Keine Daten -->
        <div id="no-data" class="hidden text-center py-8">
          <div class="text-gray-500 dark:text-gray-400">
            <span class="text-4xl">üì≠</span>
            <p class="mt-2 text-lg font-medium">Keine Aufenthalte gefunden</p>
            <p class="mt-1">Erstellen Sie Ihren ersten Aufenthalt.</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  let currentAufenthalte: Array<{
    id: number;
    userId: number;
    ankunft: string;
    abreise: string;
    zaehlerAnkunft: number;
    zaehlerAbreise: number;
    anzahlMitglieder: number;
    anzahlGaeste: number;
    jahr: number;
    user: { name: string; email: string; role: string };
  }> = [];
  
  let currentPreise: {
    oelpreisProLiter?: number;
    uebernachtungMitglied?: number;
    uebernachtungGast?: number;
    verbrauchProStunde?: number;
  } = {};
  
  let allUeberlappungsAufenthalte: any[] = [];

  // √úberlappungsaufenthalte laden
  async function loadUeberlappungsAufenthalte(jahr: string) {
    try {
      const response = await fetch('/api/aufenthalte/ueberlappungen', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          eigeneAufenthalte: currentAufenthalte,
          jahr: jahr
        })
      });
      
      if (response.ok) {
        allUeberlappungsAufenthalte = await response.json();
        console.log('üìä √úberlappungsaufenthalte geladen:', allUeberlappungsAufenthalte.length);
      }
    } catch (error) {
      console.error('‚ùå Fehler beim Laden der √úberlappungsaufenthalte:', error);
    }
  }
  
  // √úberlappungsinfo f√ºr einen Aufenthalt ermitteln
  function getUeberlappungsInfo(aufenthalt: any, alleUeberlappungen: any[]) {
    return alleUeberlappungen.filter(overlap => {
      // √úberlappung pr√ºfen: Z√§hlerst√§nde √ºberschneiden sich
      const a1Start = aufenthalt.zaehlerAnkunft;
      const a1Ende = aufenthalt.zaehlerAbreise;
      const a2Start = overlap.zaehlerAnkunft;
      const a2Ende = overlap.zaehlerAbreise;
      
      // √úberlappung liegt vor wenn: a1Ende > a2Start UND a1Start < a2Ende
      return a1Ende > a2Start && a1Start < a2Ende;
    });
  }

  // Aufenthalte aus der API laden
  async function loadAufenthalte() {
    try {
      showLoading(true);
      const jahrSelect = document.getElementById('jahr') as HTMLSelectElement;
      const jahr = jahrSelect ? jahrSelect.value : '2024';
      
      console.log('üîç Lade Aufenthalte f√ºr Jahr:', jahr);
      const response = await fetch(`/api/aufenthalte?jahr=${jahr}`);
      console.log('üì° API Response Status:', response.status);
      
      if (response.ok) {
        currentAufenthalte = await response.json();
        console.log('üìä Aufenthalte geladen:', currentAufenthalte.length);
        console.log('üìã Erste 2 Aufenthalte:', currentAufenthalte.slice(0, 2));
        
        // √úberlappungsaufenthalte laden
        await loadUeberlappungsAufenthalte(jahr);
        
        renderAufenthalte(currentAufenthalte);
      } else {
        console.error('‚ùå Fehler beim Laden der Aufenthalte');
        showNoData();
      }
    } catch (error) {
      console.error('‚ùå Fehler beim Laden der Aufenthalte:', error);
      showNoData();
    } finally {
      showLoading(false);
    }
  }

  // Preise laden
  async function loadPreise(jahr: string) {
    try {
      const response = await fetch(`/api/preise?jahr=${jahr}`);
      if (response.ok) {
        currentPreise = await response.json();
      }
    } catch (error) {
      console.error('Fehler beim Laden der Preise:', error);
    }
  }

  // Aufenthalte rendern
  function renderAufenthalte(aufenthalte: typeof currentAufenthalte) {
    console.log('üé® renderAufenthalte aufgerufen mit', aufenthalte.length, 'Aufenthalten');
    const tbody = document.getElementById('aufenthalte-tbody');
    if (!tbody) {
      console.error('‚ùå tbody Element nicht gefunden');
      return;
    }

    if (aufenthalte.length === 0) {
      console.log('üì≠ Keine Aufenthalte vorhanden');
      showNoData();
      return;
    }

    tbody.innerHTML = '';
    
    aufenthalte.forEach((aufenthalt: typeof currentAufenthalte[0]) => {
      const row = document.createElement('tr');
      const ankunft = new Date(aufenthalt.ankunft).toLocaleDateString('de-DE');
      const abreise = new Date(aufenthalt.abreise).toLocaleDateString('de-DE');
      const zaehlerStart = aufenthalt.zaehlerAnkunft;
      const zaehlerEnde = aufenthalt.zaehlerAbreise;
      const verbrauchteStunden = zaehlerEnde - zaehlerStart;
      
      // Kosten berechnen
      const oelKosten = verbrauchteStunden * (currentPreise.verbrauchProStunde || 5.5) * (currentPreise.oelpreisProLiter || 1.25);
      const anzahlNaechte = Math.ceil((new Date(aufenthalt.abreise).getTime() - new Date(aufenthalt.ankunft).getTime()) / (1000 * 60 * 60 * 24));
      const uebernachtungKosten = anzahlNaechte * (
        aufenthalt.anzahlMitglieder * (currentPreise.uebernachtungMitglied || 15) +
        aufenthalt.anzahlGaeste * (currentPreise.uebernachtungGast || 25)
      );
      const gesamtKosten = oelKosten + uebernachtungKosten;

      row.innerHTML = `
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="flex items-center">
            <div class="flex-shrink-0 h-10 w-10">
              <div class="h-10 w-10 rounded-full bg-blue-500 flex items-center justify-center">
                <span class="text-white text-sm font-medium">${aufenthalt.user.name.charAt(0)}</span>
              </div>
            </div>
            <div class="ml-4">
              <div class="text-sm font-medium text-gray-900 dark:text-white">
                ${aufenthalt.user.name}
              </div>
              <div class="text-sm text-gray-500 dark:text-gray-400">
                ${aufenthalt.user.email}
              </div>
            </div>
          </div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
          ${ankunft}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
          ${abreise}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
          ${zaehlerStart.toFixed(1)} h ‚Üí ${zaehlerEnde.toFixed(1)} h
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
          ${aufenthalt.anzahlMitglieder} + ${aufenthalt.anzahlGaeste} G√§ste
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
          ‚Ç¨ ${gesamtKosten.toFixed(2)}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
          <div id="overlap-info-${aufenthalt.id}">
            <!-- Wird dynamisch geladen -->
          </div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
          <div id="savings-info-${aufenthalt.id}">
            <!-- Wird dynamisch geladen -->
          </div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
          <div id="total-costs-${aufenthalt.id}">
            <!-- Wird dynamisch geladen -->
          </div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
          <a href="/aufenthalte/${aufenthalt.id}/edit" class="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300 mr-4">
            Bearbeiten (ID: ${aufenthalt.id})
          </a>
          <button onclick="(function(id) { if(confirm('M√∂chten Sie diesen Aufenthalt wirklich l√∂schen?')) { fetch('/api/aufenthalte/' + id, { method: 'DELETE' }).then(r => { if(r.ok) { window.location.reload(); } else { alert('Fehler beim L√∂schen'); } }).catch(e => { console.error('Fehler:', e); alert('Fehler beim L√∂schen'); }); } })(${aufenthalt.id})" class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300">
            L√∂schen
          </button>
        </td>
      `;
      
      tbody.appendChild(row);
    });
    
    // √úberlappungsinfo f√ºr jeden Aufenthalt laden
    aufenthalte.forEach((aufenthalt: typeof currentAufenthalte[0]) => {
      loadOverlapInfo(aufenthalt);
    });
    

  }

  // Urspr√ºngliche Kosten berechnen (vor Einsparungen)
  function calculateOriginalCosts(aufenthalt: any): number {
    const zaehlerStart = aufenthalt.zaehlerAnkunft;
    const zaehlerEnde = aufenthalt.zaehlerAbreise;
    const verbrauchteStunden = zaehlerEnde - zaehlerStart;
    
    // √ñlkosten
    const oelKosten = verbrauchteStunden * (currentPreise.verbrauchProStunde || 5.5) * (currentPreise.oelpreisProLiter || 1.25);
    
    // √úbernachtungskosten
    const anzahlNaechte = Math.ceil((new Date(aufenthalt.abreise).getTime() - new Date(aufenthalt.ankunft).getTime()) / (1000 * 60 * 60 * 24));
    const uebernachtungKosten = anzahlNaechte * (
      aufenthalt.anzahlMitglieder * (currentPreise.uebernachtungMitglied || 15) +
      aufenthalt.anzahlGaeste * (currentPreise.uebernachtungGast || 25)
    );
    
    return oelKosten + uebernachtungKosten;
  }

  // Einsparungen durch √úberlappungen berechnen
  function calculateSavings(aufenthalt: any, overlaps: any[]): number {
    if (overlaps.length === 0) return 0;
    
    let totalSavings = 0;
    
    overlaps.forEach((overlap: any) => {
      // √úberlappungsbereich berechnen
      const overlapStart = Math.max(aufenthalt.zaehlerAnkunft, overlap.zaehlerAnkunft);
      const overlapEnd = Math.min(aufenthalt.zaehlerAbreise, overlap.zaehlerAbreise);
      const overlapHours = overlapEnd - overlapStart;
      
      if (overlapHours > 0) {
        // √ñlkosten-Einsparung: √úberlappungsstunden werden aufgeteilt
        const oelKostenProStunde = (currentPreise.verbrauchProStunde || 5.5) * (currentPreise.oelpreisProLiter || 1.25);
        const oelSavings = overlapHours * oelKostenProStunde * 0.5; // 50% Einsparung durch Aufteilung
        
        // √úbernachtungskosten-Einsparung: Gemeinsame Nutzung der Infrastruktur
        const uebernachtungSavings = overlapHours / 24 * 5; // Kleine Einsparung pro Tag
        
        totalSavings += oelSavings + uebernachtungSavings;
      }
    });
    
    return totalSavings;
  }

  // √úberlappungsinfo f√ºr einzelnen Aufenthalt laden
  async function loadOverlapInfo(aufenthalt: typeof currentAufenthalte[0]) {
    try {
      const overlaps = getUeberlappungsInfo(aufenthalt, allUeberlappungsAufenthalte);
      const overlapDiv = document.getElementById(`overlap-info-${aufenthalt.id}`);
      const savingsDiv = document.getElementById(`savings-info-${aufenthalt.id}`);
      const totalCostsDiv = document.getElementById(`total-costs-${aufenthalt.id}`);
      
      if (overlapDiv) {
        if (overlaps.length === 0) {
          overlapDiv.innerHTML = `
            <span class="text-green-600 dark:text-green-400 text-xs">
              ‚úÖ Keine
            </span>
          `;
        } else {
          const overlapText = overlaps.map((overlap: any) => {
            const startZaehler = Math.max(aufenthalt.zaehlerAnkunft, overlap.zaehlerAnkunft);
            const endZaehler = Math.min(aufenthalt.zaehlerAbreise, overlap.zaehlerAbreise);
            const overlapHours = endZaehler - startZaehler;
            
            return `${overlap.user.name} (${startZaehler.toFixed(1)}h - ${endZaehler.toFixed(1)}h, ${overlapHours.toFixed(1)}h)`;
          }).join('<br>');
          
          overlapDiv.innerHTML = `
            <span class="text-orange-600 dark:text-orange-400 text-xs">
              ‚ö†Ô∏è ${overlaps.length} √úberlappung${overlaps.length > 1 ? 'en' : ''}:<br>
              ${overlapText}
            </span>
          `;
        }
      }
      
      // Einsparungen berechnen und anzeigen
      if (savingsDiv) {
        const savings = calculateSavings(aufenthalt, overlaps);
        if (savings > 0) {
          savingsDiv.innerHTML = `
            <span class="text-green-600 dark:text-green-400 text-sm font-medium">
              üí∞ ‚Ç¨ ${savings.toFixed(2)}
            </span>
          `;
        } else {
          savingsDiv.innerHTML = `
            <span class="text-gray-500 dark:text-gray-400 text-sm">
              ‚Ç¨ 0.00
            </span>
          `;
        }
      }
      
      // Gesamtkosten berechnen und anzeigen (Kosten - Einsparungen)
      if (totalCostsDiv) {
        const savings = calculateSavings(aufenthalt, overlaps);
        const originalCosts = calculateOriginalCosts(aufenthalt);
        const totalCosts = originalCosts - savings;
        
        totalCostsDiv.innerHTML = `
          <span class="text-blue-600 dark:text-blue-400 text-sm font-medium">
            ‚Ç¨ ${totalCosts.toFixed(2)}
          </span>
        `;
      }
    } catch (error) {
      console.error('‚ùå Fehler beim Laden der √úberlappungsinfo:', error);
    }
  }







  // Aufenthalt l√∂schen
  async function deleteAufenthalt(id: number) {
    if (!confirm('M√∂chten Sie diesen Aufenthalt wirklich l√∂schen?')) {
      return;
    }
    
    try {
      const response = await fetch(`/api/aufenthalte/${id}`, {
        method: 'DELETE',
      });
      
      if (response.ok) {
        loadAufenthalte(); // Neu laden
      } else {
        alert('Fehler beim L√∂schen des Aufenthalts');
      }
    } catch (error) {
      console.error('Fehler beim L√∂schen:', error);
      alert('Ein Fehler ist aufgetreten');
    }
  }

  // Lade-Animation anzeigen/verstecken
  function showLoading(show: boolean) {
    const loading = document.getElementById('loading');
    if (loading) {
      loading.classList.toggle('hidden', !show);
    }
  }

  // Keine Daten anzeigen
  function showNoData() {
    const noData = document.getElementById('no-data');
    if (noData) {
      noData.classList.remove('hidden');
    }
  }

  // Event-Listener
  document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ DOM geladen, starte Initialisierung...');
    
    try {
      await loadPreise('2024');
      console.log('‚úÖ Preise geladen');
      
      await loadAufenthalte();
      console.log('‚úÖ Aufenthalte geladen');
      

      
      // Filter-Event-Listener
      const jahrSelect = document.getElementById('jahr');
      const statusSelect = document.getElementById('status');
      const filterBtn = document.getElementById('filter-btn');
      
      if (jahrSelect) {
        jahrSelect.addEventListener('change', loadAufenthalte);
        console.log('‚úÖ Jahr-Select Event-Listener gesetzt');
      }
      if (statusSelect) {
        statusSelect.addEventListener('change', loadAufenthalte);
        console.log('‚úÖ Status-Select Event-Listener gesetzt');
      }
      if (filterBtn) {
        filterBtn.addEventListener('click', loadAufenthalte);
        console.log('‚úÖ Filter-Button Event-Listener gesetzt');
      }
      
      console.log('üéØ Alle Event-Listener gesetzt!');
    } catch (error) {
      console.error('‚ùå Fehler bei der Initialisierung:', error);
    }
  });
</script>
