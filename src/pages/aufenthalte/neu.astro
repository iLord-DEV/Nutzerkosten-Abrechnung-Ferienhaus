---
import ProtectedLayout from '../../layouts/ProtectedLayout.astro';

// Zugriffskontrolle
const sessionCookie = Astro.cookies.get('session');
if (!sessionCookie) {
  return Astro.redirect('/login');
}

const session = JSON.parse(sessionCookie.value);
---

<ProtectedLayout title="Neuer Aufenthalt - Nutzerkosten">
  <div class="px-4 sm:px-6 lg:px-8">
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 dark:text-white">
            Neuer Aufenthalt
          </h1>
          <p class="mt-2 text-gray-600 dark:text-gray-400">
            Erfassen Sie einen neuen Aufenthalt mit Zählerständen und Personenanzahl
          </p>
        </div>
        <a href="/aufenthalte" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md text-sm font-medium">
          ← Zurück zur Übersicht
        </a>
      </div>
    </div>

    <div class="max-w-3xl">
      <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
        <div class="px-4 py-5 sm:p-6">
          <form id="aufenthalt-form" class="space-y-6">
            <!-- Benutzer-Auswahl (nur für Admins) -->
            {session.role === 'ADMIN' && (
              <div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">
                  Benutzer auswählen
                </h3>
                <div>
                  <label for="userId" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Benutzer *
                  </label>
                  <select id="userId" name="userId" required
                    class="block w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
                    <option value="">Bitte wählen...</option>
                    <!-- Wird dynamisch geladen -->
                  </select>
                </div>
              </div>
            )}
            
            <!-- Verstecktes Feld für normale Benutzer -->
            {session.role !== 'ADMIN' && (
              <input type="hidden" id="userId" name="userId" value={session.userId} />
            )}

            <!-- Aufenthaltsdaten -->
            <div>
              <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">
                Aufenthaltsdaten
              </h3>
              <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                <div>
                  <label for="ankunft" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Ankunft *
                  </label>
                  <input type="datetime-local" id="ankunft" name="ankunft" required
                    class="block w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
                </div>
                <div>
                  <label for="abreise" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Abreise *
                  </label>
                  <input type="datetime-local" id="abreise" name="abreise" required
                    class="block w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
                </div>
              </div>
            </div>

            <!-- Zählerstände -->
            <div>
              <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">
                Ölzählerstände
              </h3>
              <div class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4 mb-4">
                <div class="flex">
                  <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <div class="ml-3">
                    <h3 class="text-sm font-medium text-yellow-800 dark:text-yellow-200">
                      Wichtig: Zählerstände, nicht Datum!
                    </h3>
                    <div class="mt-2 text-sm text-yellow-700 dark:text-yellow-300">
                      <p>
                        Die Kostenaufteilung basiert auf den Zählerständen, nicht auf den Aufenthaltsdaten. 
                        Überlappende Zählerstände werden gleichmäßig aufgeteilt.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                <div>
                  <label for="zaehlerStart" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Zählerstand bei Ankunft (Stunden) *
                  </label>
                  <input type="number" id="zaehlerStart" name="zaehlerStart" step="0.1" required
                    class="block w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                    placeholder="z.B. 100.0">
                </div>
                <div>
                  <label for="zaehlerEnde" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Zählerstand bei Abreise (Stunden) *
                  </label>
                  <input type="number" id="zaehlerEnde" name="zaehlerEnde" step="0.1" required
                    class="block w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                    placeholder="z.B. 110.0">
                </div>
              </div>
            </div>

            <!-- Personenanzahl -->
            <div>
              <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">
                Personenanzahl
              </h3>
              <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                <div>
                  <label for="anzahlMitglieder" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Anzahl Mitglieder *
                  </label>
                  <input type="number" id="anzahlMitglieder" name="anzahlMitglieder" min="1" value="1" required
                    class="block w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
                </div>
                <div>
                  <label for="anzahlGaeste" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Anzahl Gäste
                  </label>
                  <input type="number" id="anzahlGaeste" name="anzahlGaeste" min="0" value="0"
                    class="block w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
                </div>
              </div>
            </div>

            <!-- Kostenvorschau -->
            <div id="kosten-vorschau" class="hidden bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
              <h3 class="text-lg font-medium text-blue-800 dark:text-blue-200 mb-3">
                Kostenvorschau
              </h3>
              <div class="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span class="text-blue-700 dark:text-blue-300">Verbrauchte Stunden:</span>
                  <div class="font-medium text-blue-900 dark:text-blue-100" id="verbrauchte-stunden">-</div>
                </div>
                <div>
                  <span class="text-blue-700 dark:text-blue-300">Ölkosten:</span>
                  <div class="font-medium text-blue-900 dark:text-blue-100" id="oel-kosten">-</div>
                </div>
                <div>
                  <span class="text-blue-700 dark:text-blue-300">Übernachtungskosten:</span>
                  <div class="font-medium text-blue-900 dark:text-blue-100" id="uebernachtung-kosten">-</div>
                </div>
                <div>
                  <span class="text-blue-700 dark:text-blue-300">Gesamtkosten:</span>
                  <div class="font-medium text-blue-900 dark:text-blue-100" id="gesamt-kosten">-</div>
                </div>
              </div>
            </div>

            <!-- Überlappungs-Warnung -->
            <div id="ueberlappungs-warnung" class="hidden bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
              <div class="flex">
                <div class="flex-shrink-0">
                  <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                  </svg>
                </div>
                <div class="ml-3">
                  <h3 class="text-sm font-medium text-red-800 dark:text-red-200">
                    Überlappung erkannt!
                  </h3>
                  <div class="mt-2 text-sm text-red-700 dark:text-red-300">
                    <p id="ueberlappungs-details">
                      Ihr Aufenthalt überschneidet sich mit anderen Aufenthalten. Die Kosten werden gleichmäßig aufgeteilt.
                    </p>
                  </div>
                </div>
              </div>
            </div>

            <!-- Aktionen -->
            <div class="flex justify-end space-x-3">
              <button type="button" onclick="window.location.href='/aufenthalte'" 
                class="bg-white dark:bg-gray-700 py-2 px-4 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                Abbrechen
              </button>
              <button type="submit" 
                class="bg-blue-600 hover:bg-blue-700 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                Aufenthalt speichern
              </button>
            </div>
            
            <!-- Benachrichtigungs-Bereich -->
            <div id="notification" class="hidden mt-4 p-4 rounded-md">
              <div class="flex">
                <div class="flex-shrink-0">
                  <span id="notification-icon" class="text-lg"></span>
                </div>
                <div class="ml-3">
                  <p id="notification-message" class="text-sm font-medium"></p>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</ProtectedLayout>

<script>
  let users: Array<{id: number, name: string, email: string, role: string}> = [];
  let currentPreise: {
    oelpreisProLiter?: number;
    uebernachtungMitglied?: number;
    uebernachtungGast?: number;
    verbrauchProStunde?: number;
  } = {};

  // Benachrichtigung anzeigen
  function showNotification(message: string, type: 'success' | 'error' | 'info' = 'info') {
    const notification = document.getElementById('notification');
    const notificationMessage = document.getElementById('notification-message');
    const notificationIcon = document.getElementById('notification-icon');
    
    if (!notification || !notificationMessage || !notificationIcon) return;
    
    // Nachricht setzen
    notificationMessage.textContent = message;
    
    // Icon und Farbe je nach Typ setzen
    let icon = '';
    let bgColor = '';
    let textColor = '';
    
    switch (type) {
      case 'success':
        icon = '✅';
        bgColor = 'bg-green-50 dark:bg-green-900/20';
        textColor = 'text-green-800 dark:text-green-200';
        break;
      case 'error':
        icon = '❌';
        bgColor = 'bg-red-50 dark:bg-red-900/20';
        textColor = 'text-red-800 dark:text-red-200';
        break;
      case 'info':
      default:
        icon = 'ℹ️';
        bgColor = 'bg-blue-50 dark:bg-blue-900/20';
        textColor = 'text-blue-800 dark:text-blue-200';
        break;
    }
    
    notificationIcon.textContent = icon;
    notification.className = `mt-4 p-4 rounded-md ${bgColor}`;
    notificationMessage.className = `text-sm font-medium ${textColor}`;
    
    // Benachrichtigung anzeigen
    notification.classList.remove('hidden');
    
    // Bei Erfolg nach 2 Sekunden weiterleiten
    if (type === 'success') {
      setTimeout(() => {
        window.location.href = '/aufenthalte';
      }, 2000);
    }
  }

  // Benutzer laden
  async function loadUsers() {
    try {
      const response = await fetch('/api/users');
      if (response.ok) {
        users = await response.json();
        renderUserSelect();
      }
    } catch (error) {
      console.error('Fehler beim Laden der Benutzer:', error);
    }
  }

  // Preise laden
  async function loadPreise() {
    try {
      const jahr = new Date().getFullYear();
      const response = await fetch(`/api/preise?jahr=${jahr}`);
      if (response.ok) {
        currentPreise = await response.json();
      }
    } catch (error) {
      console.error('Fehler beim Laden der Preise:', error);
    }
  }

  // Alle Caches leeren
  function clearAllCaches() {
    // localStorage leeren (falls vorhanden)
    if (typeof localStorage !== 'undefined') {
      localStorage.clear();
    }
    
    // SessionStorage leeren (falls vorhanden)
    if (typeof sessionStorage !== 'undefined') {
      sessionStorage.clear();
    }
    
    // Browser-Cache für diese Domain leeren
    if ('caches' in window) {
      caches.keys().then(names => {
        names.forEach(name => {
          caches.delete(name);
        });
      });
    }
    
    console.log('🧹 Alle Caches wurden geleert');
  }

  // Benutzer-Select rendern
  function renderUserSelect() {
    const select = document.getElementById('userId');
    if (select) {
      select.innerHTML = '<option value="">Bitte wählen...</option>';
      users.forEach(user => {
        const option = document.createElement('option');
        option.value = user.id.toString();
        option.textContent = `${user.name} (${user.role})`;
        select.appendChild(option);
      });
    }
  }

  // Kosten berechnen
  function calculateCosts() {
    const zaehlerStartEl = document.getElementById('zaehlerStart') as HTMLInputElement;
    const zaehlerEndeEl = document.getElementById('zaehlerEnde') as HTMLInputElement;
    const ankunftEl = document.getElementById('ankunft') as HTMLInputElement;
    const abreiseEl = document.getElementById('abreise') as HTMLInputElement;
    const anzahlMitgliederEl = document.getElementById('anzahlMitglieder') as HTMLInputElement;
    const anzahlGaesteEl = document.getElementById('anzahlGaeste') as HTMLInputElement;
    
    const zaehlerStart = parseFloat(zaehlerStartEl?.value || '0');
    const zaehlerEnde = parseFloat(zaehlerEndeEl?.value || '0');
    const ankunft = ankunftEl?.value;
    const abreise = abreiseEl?.value;
    const anzahlMitglieder = parseInt(anzahlMitgliederEl?.value || '1');
    const anzahlGaeste = parseInt(anzahlGaesteEl?.value || '0');

    if (zaehlerStart && zaehlerEnde && ankunft && abreise) {
      const verbrauchteStunden = zaehlerEnde - zaehlerStart;
      const startDate = new Date(ankunft);
      const endDate = new Date(abreise);
      const anzahlNaechte = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));

      // Kosten berechnen
      const oelKosten = verbrauchteStunden * (currentPreise.verbrauchProStunde || 5.5) * (currentPreise.oelpreisProLiter || 1.01);
      const uebernachtungKosten = anzahlNaechte * (
        anzahlMitglieder * (currentPreise.uebernachtungMitglied || 15) +
        anzahlGaeste * (currentPreise.uebernachtungGast || 25)
      );
      const gesamtKosten = oelKosten + uebernachtungKosten;

      // Kostenvorschau anzeigen
      const vorschau = document.getElementById('kosten-vorschau');
      if (vorschau) {
        vorschau.classList.remove('hidden');
        const verbrauchteStundenEl = document.getElementById('verbrauchte-stunden');
        const oelKostenEl = document.getElementById('oel-kosten');
        const uebernachtungKostenEl = document.getElementById('uebernachtung-kosten');
        const gesamtKostenEl = document.getElementById('gesamt-kosten');
        
        if (verbrauchteStundenEl) verbrauchteStundenEl.textContent = `${verbrauchteStunden.toFixed(1)} h`;
        if (oelKostenEl) oelKostenEl.textContent = `€ ${oelKosten.toFixed(2)}`;
        if (uebernachtungKostenEl) uebernachtungKostenEl.textContent = `€ ${uebernachtungKosten.toFixed(2)}`;
        if (gesamtKostenEl) gesamtKostenEl.textContent = `€ ${gesamtKosten.toFixed(2)}`;
      }

      // Überlappungen prüfen
      checkUeberlappungen(zaehlerStart, zaehlerEnde);
    }
  }

  // Überlappungen prüfen
  async function checkUeberlappungen(start: number, ende: number) {
    try {
      const response = await fetch('/api/aufenthalte');
      if (response.ok) {
        const aufenthalte = await response.json();
        const ueberlappungen = aufenthalte.filter((a: any) => 
          a.zaehlerAbreise > start && a.zaehlerAnkunft < ende
        );

        if (ueberlappungen.length > 0) {
          showUeberlappungsWarnung(ueberlappungen);
        } else {
          hideUeberlappungsWarnung();
        }
      }
    } catch (error) {
      console.error('Fehler beim Prüfen der Überlappungen:', error);
    }
  }

  // Überlappungs-Warnung anzeigen
  function showUeberlappungsWarnung(ueberlappungen: any[]) {
    const warning = document.getElementById('ueberlappungs-warnung');
    const details = document.getElementById('ueberlappungs-details');
    
    if (warning && details) {
      const names = ueberlappungen.map((u: any) => u.user.name).join(', ');
      details.innerHTML = `Ihr Aufenthalt überschneidet sich mit: <strong>${names}</strong>. Die Kosten werden gleichmäßig aufgeteilt.`;
      warning.classList.remove('hidden');
    }
  }

  // Überlappungs-Warnung verstecken
  function hideUeberlappungsWarnung() {
    const warning = document.getElementById('ueberlappungs-warnung');
    if (warning) {
      warning.classList.add('hidden');
    }
  }

  // Formular absenden
  async function handleSubmit(event: Event) {
    event.preventDefault();
    
    const formData = new FormData(event.target as HTMLFormElement);
    const userId = parseInt(formData.get('userId') as string);
    const ankunft = formData.get('ankunft') as string;
    const abreise = formData.get('abreise') as string;
    const zaehlerStart = parseFloat(formData.get('zaehlerStart') as string);
    const zaehlerEnde = parseFloat(formData.get('zaehlerEnde') as string);
    const anzahlMitglieder = parseInt(formData.get('anzahlMitglieder') as string);
    const anzahlGaeste = parseInt(formData.get('anzahlGaeste') as string);

    // Validierung
    if (!userId || !ankunft || !abreise || !zaehlerStart || !zaehlerEnde) {
      showNotification('Bitte füllen Sie alle Pflichtfelder aus.', 'error');
      return;
    }

    if (zaehlerEnde <= zaehlerStart) {
      showNotification('Der Endzählerstand muss höher als der Startzählerstand sein.', 'error');
      return;
    }

    if (new Date(abreise) <= new Date(ankunft)) {
      showNotification('Das Abreisedatum muss nach dem Ankunftsdatum liegen.', 'error');
      return;
    }

    // Daten für die API vorbereiten
    const aufenthaltData = {
      userId: userId,
      ankunft: new Date(ankunft).toISOString(),
      abreise: new Date(abreise).toISOString(),
              zaehlerAnkunft: zaehlerStart,
        zaehlerAbreise: zaehlerEnde,
      anzahlMitglieder: anzahlMitglieder,
      anzahlGaeste: anzahlGaeste,
      jahr: new Date(ankunft).getFullYear()
    };
    
    try {
      const response = await fetch('/api/aufenthalte', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(aufenthaltData),
      });
      
      if (response.ok) {
        const result = await response.json();
        clearAllCaches(); // Alle Caches leeren nach erfolgreichem Speichern
        showNotification('Aufenthalt erfolgreich gespeichert! Sie werden weitergeleitet...', 'success');
        // Weiterleitung erfolgt automatisch nach 2 Sekunden in showNotification
      } else {
        const error = await response.json();
        showNotification(`Fehler: ${error.error || 'Unbekannter Fehler'}`, 'error');
      }
    } catch (error) {
      console.error('Fehler beim Speichern:', error);
      showNotification('Ein Fehler ist aufgetreten. Bitte versuchen Sie es erneut.', 'error');
    }
  }

  // Event-Listener
  document.addEventListener('DOMContentLoaded', async () => {
    await loadUsers();
    await loadPreise();
    
    // Aktuelles Datum setzen
    const now = new Date();
    const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString().slice(0, 16);
    
    const ankunftInput = document.getElementById('ankunft') as HTMLInputElement;
    const abreiseInput = document.getElementById('abreise') as HTMLInputElement;
    
    if (ankunftInput) ankunftInput.value = localDateTime;
    if (abreiseInput) abreiseInput.value = localDateTime;
    
    // Event-Listener für Formularfelder
    const form = document.getElementById('aufenthalt-form');
    if (form) {
      const inputs = form.querySelectorAll('input');
      inputs.forEach(input => {
        input.addEventListener('input', calculateCosts);
      });
      
      // Formular-Submit-Handler
      form.addEventListener('submit', handleSubmit);
    }
  });
</script>
