---
import ProtectedLayout from '../../../layouts/ProtectedLayout.astro';

// Zugriffskontrolle: Nur Admins
const sessionCookie = Astro.cookies.get('session');
if (!sessionCookie) {
  return Astro.redirect('/login');
}

const session = JSON.parse(sessionCookie.value);
if (session.role !== 'ADMIN') {
  return Astro.redirect('/dashboard');
}

const { id } = Astro.params;

// Tankfüllung laden
let tankfuellung = null;
try {
  const { PrismaClient } = await import('@prisma/client');
  const prisma = new PrismaClient();
  
  tankfuellung = await prisma.tankfuellung.findUnique({
    where: { id: parseInt(id) },
    include: {
      zaehler: {
        select: {
          id: true,
          einbauDatum: true,
        },
      },
    },
  });
  
  await prisma.$disconnect();
} catch (error) {
  console.error('Fehler beim Laden der Tankfüllung:', error);
  return Astro.redirect('/tankfuellungen');
}

if (!tankfuellung) {
  return Astro.redirect('/tankfuellungen');
}
---

<ProtectedLayout title="Tankfüllung bearbeiten - Nutzerkosten">
  <div class="px-4 sm:px-6 lg:px-8">
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 dark:text-white">
            Tankfüllung bearbeiten
          </h1>
          <p class="mt-2 text-gray-600 dark:text-gray-400">
            Bearbeiten Sie die Details der Tankfüllung
          </p>
        </div>
        <a href="/tankfuellungen" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md text-sm font-medium">
          ← Zurück zur Übersicht
        </a>
      </div>
    </div>

    <div class="max-w-2xl">
      <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
        <div class="px-4 py-5 sm:p-6">
          <form id="edit-form" class="space-y-6">
            <input type="hidden" id="tankfuellung-id" value={tankfuellung.id}>
            
            <!-- Datum -->
            <div>
              <label for="datum" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Datum
              </label>
              <input type="date" id="datum" required 
                     value={new Date(tankfuellung.datum).toISOString().split('T')[0]}
                     class="block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
            </div>

            <!-- Zählerstand -->
            <div>
              <label for="zaehlerstand" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Zählerstand (Stunden)
              </label>
              <input type="number" id="zaehlerstand" step="0.1" required 
                     value={tankfuellung.zaehlerstand}
                     class="block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
              <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
                Aktueller Zähler: #{tankfuellung.zaehler.id} (eingebaut: {new Date(tankfuellung.zaehler.einbauDatum).toLocaleDateString('de-DE')})
              </p>
            </div>

            <!-- Liter -->
            <div>
              <label for="liter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Getankte Liter
              </label>
              <input type="number" id="liter" step="0.1" required 
                     value={tankfuellung.liter}
                     class="block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
            </div>

            <!-- Preis pro Liter -->
            <div>
              <label for="preisProLiter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Preis pro Liter (€)
              </label>
              <input type="number" id="preisProLiter" step="0.01" required 
                     value={tankfuellung.preisProLiter}
                     class="block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
            </div>

            <!-- Notizen -->
            <div>
              <label for="notizen" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Notizen (optional)
              </label>
              <textarea id="notizen" rows="3" 
                        class="block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                        placeholder="Zusätzliche Informationen..."></textarea>
            </div>

            <div class="flex justify-end space-x-3">
              <a href="/tankfuellungen" class="bg-gray-300 hover:bg-gray-400 text-gray-800 px-4 py-2 rounded-md text-sm font-medium">
                Abbrechen
              </a>
              <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                Speichern
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</ProtectedLayout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('edit-form') as HTMLFormElement;
    
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(form);
      const tankfuellungId = document.getElementById('tankfuellung-id')?.getAttribute('value');
      
      const data = {
        datum: (document.getElementById('datum') as HTMLInputElement).value,
        zaehlerstand: parseFloat((document.getElementById('zaehlerstand') as HTMLInputElement).value),
        liter: parseFloat((document.getElementById('liter') as HTMLInputElement).value),
        preisProLiter: parseFloat((document.getElementById('preisProLiter') as HTMLInputElement).value),
        notizen: (document.getElementById('notizen') as HTMLTextAreaElement).value || null,
      };
      
      try {
        const response = await fetch(`/api/tankfuellungen/${tankfuellungId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });
        
        if (response.ok) {
          alert('Tankfüllung erfolgreich aktualisiert!');
          window.location.href = '/tankfuellungen';
        } else {
          const error = await response.json();
          alert(`Fehler beim Aktualisieren: ${error.error || 'Unbekannter Fehler'}`);
        }
      } catch (error) {
        console.error('Fehler beim Aktualisieren der Tankfüllung:', error);
        alert('Fehler beim Aktualisieren der Tankfüllung');
      }
    });
  });
</script>
