generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                @id @default(autoincrement())
  email              String             @unique
  name               String
  role               Role               @default(USER)
  createdAt          DateTime           @default(now())
  password           String
  aufenthalte        Aufenthalt[]
  terminAbstimmungen TerminAbstimmung[]
  terminAenderungen  TerminAenderung[]
  terminKommentare   TerminKommentar[]
  terminPlanungen    TerminPlanung[]
}

model Aufenthalt {
  id                        Int      @id @default(autoincrement())
  userId                    Int
  ankunft                   DateTime
  abreise                   DateTime
  zaehlerAnkunft            Float
  zaehlerAbreise            Float
  uebernachtungenMitglieder Int      @default(0)
  uebernachtungenGaeste     Int      @default(0)
  jahr                      Int
  zaehlerId                 Int?
  zaehlerAbreiseId          Int?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  user                      User     @relation(fields: [userId], references: [id])
  zaehlerAbreiseRef         Zaehler? @relation("AufenthaltAbreise", fields: [zaehlerAbreiseId], references: [id])
  zaehler                   Zaehler? @relation("AufenthaltAnkunft", fields: [zaehlerId], references: [id])

  @@index([userId], map: "Aufenthalt_userId_fkey")
  @@index([zaehlerAbreiseId], map: "Aufenthalt_zaehlerAbreiseId_fkey")
  @@index([zaehlerId], map: "Aufenthalt_zaehlerId_fkey")
}

model Tankfuellung {
  id            Int      @id @default(autoincrement())
  datum         DateTime
  liter         Float
  preisProLiter Float
  zaehlerstand  Float
  zaehlerId     Int?
  createdAt     DateTime @default(now())
  zaehler       Zaehler? @relation(fields: [zaehlerId], references: [id])

  @@index([zaehlerId], map: "Tankfuellung_zaehlerId_fkey")
}

model Zaehler {
  id                 Int            @id @default(autoincrement())
  einbauDatum        DateTime
  ausbauDatum        DateTime?
  letzterStand       Float
  istAktiv           Boolean        @default(true)
  notizen            String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  aufenthalteAbreise Aufenthalt[]   @relation("AufenthaltAbreise")
  aufenthalteAnkunft Aufenthalt[]   @relation("AufenthaltAnkunft")
  tankfuellungen     Tankfuellung[]
}

model Preise {
  jahr                  Int       @id
  oelpreisProLiter      Float
  uebernachtungMitglied Float
  uebernachtungGast     Float
  verbrauchProStunde    Float     @default(5.5)
  istBerechnet          Boolean   @default(false)
  gueltigAb             DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model JahresAbschluss {
  jahr               Int   @id
  zaehlerstand       Float
  gesamtKosten       Float
  anzahlAufenthalte  Int
  verbrauchProStunde Float
}

model TerminPlanung {
  id           Int                @id @default(autoincrement())
  userId       Int
  titel        String
  startDatum   DateTime
  endDatum     DateTime
  beschreibung String?
  status       TerminStatus       @default(PENDING)
  version      Int                @default(1)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  abstimmungen TerminAbstimmung[]
  aenderungen  TerminAenderung[]
  kommentare   TerminKommentar[]
  user         User               @relation(fields: [userId], references: [id])

  @@index([userId], map: "TerminPlanung_userId_fkey")
}

model TerminAbstimmung {
  id              Int            @id @default(autoincrement())
  terminPlanungId Int
  userId          Int
  stimme          AbstimmungsTyp
  kommentar       String?
  version         Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  terminPlanung   TerminPlanung  @relation(fields: [terminPlanungId], references: [id])
  user            User           @relation(fields: [userId], references: [id])

  @@index([terminPlanungId], map: "TerminAbstimmung_terminPlanungId_fkey")
  @@index([userId], map: "TerminAbstimmung_userId_fkey")
}

model TerminKommentar {
  id              Int               @id @default(autoincrement())
  terminPlanungId Int
  userId          Int
  inhalt          String
  version         Int
  createdAt       DateTime          @default(now())
  parentId        Int?
  parent          TerminKommentar?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies         TerminKommentar[] @relation("CommentReplies")
  terminPlanung   TerminPlanung     @relation(fields: [terminPlanungId], references: [id])
  user            User              @relation(fields: [userId], references: [id])

  @@index([parentId], map: "TerminKommentar_parentId_fkey")
  @@index([terminPlanungId], map: "TerminKommentar_terminPlanungId_fkey")
  @@index([userId], map: "TerminKommentar_userId_fkey")
}

model TerminAenderung {
  id              Int           @id @default(autoincrement())
  terminPlanungId Int
  userId          Int
  alteStartDatum  DateTime
  alteEndDatum    DateTime
  neueStartDatum  DateTime
  neueEndDatum    DateTime
  grund           String?
  version         Int
  createdAt       DateTime      @default(now())
  terminPlanung   TerminPlanung @relation(fields: [terminPlanungId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@index([terminPlanungId], map: "TerminAenderung_terminPlanungId_fkey")
  @@index([userId], map: "TerminAenderung_userId_fkey")
}

enum TerminStatus {
  PENDING
  APPROVED
  DISCUSSING
  CANCELLED
}

enum AbstimmungsTyp {
  APPROVE
  NEED_INFO
}

enum Role {
  ADMIN
  USER
}
