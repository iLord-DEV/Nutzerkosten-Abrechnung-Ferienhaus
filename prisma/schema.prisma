// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  name            String
  role            Role     @default(USER)
  createdAt       DateTime @default(now())
  
  aufenthalte     Aufenthalt[]
}

model Aufenthalt {
  id                      Int      @id @default(autoincrement())
  userId                  Int
  ankunft                 DateTime
  abreise                 DateTime
  zaehlerAnkunft          Float    // Ölzählerstand bei Ankunft
  zaehlerAbreise          Float    // Ölzählerstand bei Abreise  
  uebernachtungenMitglieder Int    @default(0) // Anzahl Übernachtungen für WG-Mitglieder
  uebernachtungenGaeste   Int      @default(0) // Anzahl Übernachtungen für Gäste
  jahr                    Int      // Für Abschluss-Logic
  zaehlerId               Int?     // Referenz zum Zähler bei Ankunft
  zaehlerAbreiseId        Int?     // Referenz zum Zähler bei Abreise (falls gewechselt)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id])
  zaehler Zaehler? @relation("AufenthaltAnkunft", fields: [zaehlerId], references: [id])
  zaehlerAbreiseRef Zaehler? @relation("AufenthaltAbreise", fields: [zaehlerAbreiseId], references: [id])
}

model Tankfuellung {
  id            Int      @id @default(autoincrement())
  datum         DateTime
  liter         Float
  preisProLiter Float
  zaehlerstand  Float    // Zählerstand nach Tankfüllung
  zaehlerId     Int?     // Referenz zum aktuellen Zähler
  createdAt     DateTime @default(now())
  
  zaehler       Zaehler? @relation(fields: [zaehlerId], references: [id])
}

model Zaehler {
  id              Int      @id @default(autoincrement())
  einbauDatum     DateTime // Datum des Einbaus
  ausbauDatum     DateTime? // Datum des Ausbaus (null = aktuell aktiv)
  letzterStand    Float    // Letzter gemessener Stand vor Ausbau
  istAktiv        Boolean  @default(true) // Ist der Zähler aktuell aktiv?
  notizen         String?  // Notizen zum Zähler (Grund für Wechsel, etc.)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  tankfuellungen  Tankfuellung[]
  aufenthalteAnkunft   Aufenthalt[] @relation("AufenthaltAnkunft")
  aufenthalteAbreise   Aufenthalt[] @relation("AufenthaltAbreise")
}

model Preise {
  jahr                      Int      @id
  oelpreisProLiter          Float
  uebernachtungMitglied     Float // Preis pro Nacht für WG-Mitglieder
  uebernachtungGast         Float // Preis pro Nacht für Gäste
  verbrauchProStunde        Float @default(5.5) // Liter Öl pro Brennerstunde (Fallback)
  istBerechnet              Boolean @default(false) // true wenn aus Tankdaten berechnet
  gueltigAb                 DateTime? // Ab wann gelten diese Übernachtungspreise (optional)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model JahresAbschluss {
  jahr                Int      @id
  zaehlerstand        Float    // Zählerstand am Jahresende
  gesamtKosten        Float    // Gesamtkosten des Jahres
  anzahlAufenthalte   Int      // Anzahl Aufenthalte im Jahr
  verbrauchProStunde  Float    // Verbrauch pro Stunde (Fallback oder berechnet)
}

enum Role {
  ADMIN
  USER
}
